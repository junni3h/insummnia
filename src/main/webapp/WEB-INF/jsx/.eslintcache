[{"C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\index.js":"1","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\App.js":"2","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\libs\\reducer\\RootReducer.js":"3","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\libs\\reducer\\user\\reducer\\UserReducer.js":"4","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\main\\MainViewPage.jsx":"5","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\common\\MenuLayout.jsx":"6","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\main\\UserLoginViewPage.jsx":"7","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\user\\UserRegistViewPage.jsx":"8","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\user\\UserInfoViewPage.jsx":"9","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\user\\UserListViewPage.jsx":"10","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\error\\NotFoundErrorPage.jsx":"11","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\error\\AccessErrorPage.jsx":"12","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\error\\AuthoriziedErrorPage.jsx":"13","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\libs\\reducer\\RootActions.js":"14","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\router\\libs\\UserAPIRoute.js":"15","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\libs\\reducer\\user\\action\\UserReducerAction.js":"16","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\admin\\MenuMgmtViewPage.jsx":"17","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\router\\libs\\MainAPIRoute.js":"18","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\libs\\reducer\\menu\\action\\MenuReducerAction.js":"19","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\libs\\reducer\\menu\\reducer\\MenuReducer.js":"20","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\user\\MyInfoViewPage.jsx":"21","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\router\\libs\\MenuAPIRoute.js":"22","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\common\\community\\CommunityViewPage.jsx":"23"},{"size":411,"mtime":1611714330092,"results":"24","hashOfConfig":"25"},{"size":1973,"mtime":1612423966734,"results":"26","hashOfConfig":"25"},{"size":291,"mtime":1611637329108,"results":"27","hashOfConfig":"25"},{"size":827,"mtime":1612169590410,"results":"28","hashOfConfig":"25"},{"size":908,"mtime":1611726767731,"results":"29","hashOfConfig":"25"},{"size":9256,"mtime":1612226693357,"results":"30","hashOfConfig":"25"},{"size":5517,"mtime":1612170769419,"results":"31","hashOfConfig":"25"},{"size":6514,"mtime":1611727943943,"results":"32","hashOfConfig":"25"},{"size":10422,"mtime":1611709449518,"results":"33","hashOfConfig":"25"},{"size":3700,"mtime":1611738638622,"results":"34","hashOfConfig":"25"},{"size":394,"mtime":1611296139128,"results":"35","hashOfConfig":"25"},{"size":391,"mtime":1611296139127,"results":"36","hashOfConfig":"25"},{"size":921,"mtime":1611296139128,"results":"37","hashOfConfig":"25"},{"size":240,"mtime":1611711662686,"results":"38","hashOfConfig":"25"},{"size":787,"mtime":1611560749568,"results":"39","hashOfConfig":"25"},{"size":327,"mtime":1612170747194,"results":"40","hashOfConfig":"25"},{"size":23562,"mtime":1612423053256,"results":"41","hashOfConfig":"25"},{"size":216,"mtime":1611729126495,"results":"42","hashOfConfig":"25"},{"size":121,"mtime":1611637819543,"results":"43","hashOfConfig":"25"},{"size":349,"mtime":1611712749733,"results":"44","hashOfConfig":"25"},{"size":10113,"mtime":1611728811128,"results":"45","hashOfConfig":"25"},{"size":795,"mtime":1612423065142,"results":"46","hashOfConfig":"25"},{"size":172,"mtime":1612424109806,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"homc1r",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"50"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"50"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"50"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\index.js",[],["105","106"],"C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\App.js",[],"C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\libs\\reducer\\RootReducer.js",[],"C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\libs\\reducer\\user\\reducer\\UserReducer.js",[],"C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\main\\MainViewPage.jsx",["107","108","109","110","111","112","113","114","115","116","117","118","119"],"import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport MainAPIRoute from '../../router/libs/MainAPIRoute';\r\n\r\nimport { Container } from '@material-ui/core';\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nexport default function MainViewPage() {\r\n\r\n    const login = useSelector(state => state.UserReducer);\r\n\r\n\r\n    return(\r\n        <Container className=\"bodyContainer\" component=\"main\" maxWidth=\"xl\" color=\"inherit\">\r\n            \r\n        </Container>\r\n    );\r\n}","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\common\\MenuLayout.jsx",["120","121","122"],"import React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport MainAPIRoute from '../../router/libs/MainAPIRoute';\r\nimport MenuAPIRoute from '../../router/libs/MenuAPIRoute';\r\nimport UserAPIRoute from '../../router/libs/UserAPIRoute';\r\n\r\nimport RootActions from '../../libs/reducer/RootActions';\r\n\r\nimport {AppBar, Container, List} from '@material-ui/core';\r\n\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nimport LockRoundedIcon from '@material-ui/icons/LockRounded';\r\nimport LockOpenRoundedIcon from '@material-ui/icons/LockOpenRounded';\r\nimport PersonAddRoundedIcon from '@material-ui/icons/PersonAddRounded';\r\nimport AssignmentIndIcon from '@material-ui/icons/AssignmentInd';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport 'fontsource-roboto';\r\n\r\nimport '../../css/common/common.css';\r\n\r\nexport default function MenuLayout(){\r\n\r\n    const [ menu, setMenu ] = useState([]);\r\n    const [ children, setChildren ] = useState([]);\r\n    const [ target, setTarget ] = useState(null);\r\n\r\n    const login = useSelector(state => state.UserReducer);\r\n    const dispatch = useDispatch();\r\n\r\n    async function fetchData(){\r\n        const result = await MainAPIRoute.fetchMainAPI();\r\n        const data = result.data;\r\n        console.log(data);\r\n\r\n        setMenu(data.menu);\r\n    }\r\n\r\n    useEffect(async () => {\r\n        if(login.isLogin){\r\n            fetchData();\r\n        } else {\r\n            fetchData();\r\n        }\r\n        console.log(login);\r\n        \r\n    }, [login.isLogin]);\r\n\r\n    const handleMenuOpen = (event) => {\r\n        setTarget(event.currentTarget);\r\n        const menuId = event.currentTarget.getAttribute('data');\r\n\r\n        MenuAPIRoute.fetchFindMenuItemByUpperId(menuId)\r\n                    .then ( res => {\r\n                        const data = res.data;\r\n                        setChildren(data);\r\n                    });\r\n    };\r\n    \r\n    const handleMenuClose = () => {\r\n        setTarget(null);\r\n    };\r\n\r\n    const handleLogout = (event) => {\r\n        UserAPIRoute.fetchUserLogout()\r\n                    .then(res => {\r\n                        const data = res.data;\r\n\r\n                        if(data.isLogout){\r\n                            if(window.confirm(data.message)){\r\n                                dispatch(\r\n                                    RootActions.UserReducerAction.logout(\r\n                                        {\r\n                                              isRegist: false\r\n                                            , isLogin: false\r\n                                            , login: {}\r\n                                            , menu: []\r\n                                        }\r\n                                    )\r\n                                );\r\n\r\n                                fetchData();\r\n                            }\r\n                        } else {\r\n                            alert(data.message);\r\n                        }\r\n                    });\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <AppBar position=\"static\" color=\"transparent\">\r\n                <Container maxWidth=\"xl\">\r\n                    <List component=\"nav\" aria-labelledby=\"main navigation\">\r\n                        <div className=\"leftMenu\">\r\n                            <div className=\"menuList\">\r\n                                <Link to=\"/\" className=\"textLink\">\r\n                                    <IconButton size=\"small\">\r\n                                        <Typography className=\"main\" variant=\"button\">\r\n                                            inssumnia\r\n                                        </Typography>\r\n                                    </IconButton>\r\n                                </Link>\r\n                            </div>\r\n                            {\r\n                                menu.map((item, index) => (\r\n                                    <div className=\"menuList\">\r\n                                        <IconButton size=\"small\" data={item.menuId} onClick={handleMenuOpen}>\r\n                                            <Typography className=\"menuIcon\">\r\n                                                {item.menuNm}          \r\n                                            </Typography>\r\n                                        </IconButton>\r\n                                        {\r\n                                            children.length != 0 ?\r\n                                            (\r\n                                                <Menu\r\n                                                    anchorEl={target}\r\n                                                    keepMounted\r\n                                                    open={Boolean(target)}\r\n                                                    onClose={handleMenuClose}\r\n                                                >\r\n                                                    {\r\n                                                        children.map((item, index) => (\r\n                                                            <MenuItem onClick={handleMenuClose}>\r\n                                                                <Link to={item.menuUrl}>\r\n                                                                    <IconButton size=\"small\">\r\n                                                                        <Typography className=\"menuIcon\">\r\n                                                                            {item.menuNm}          \r\n                                                                        </Typography>\r\n                                                                    </IconButton>\r\n                                                                </Link>\r\n                                                            </MenuItem>\r\n                                                        ))\r\n                                                    }\r\n                                                </Menu>\r\n                                            ):(\r\n                                                null\r\n                                            )\r\n                                        }\r\n                                        \r\n                                    </div>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                        {login.isLogin ? (\r\n                            <div className=\"rightMenu\">\r\n                                <div className=\"menuList\">\r\n                                    <Link to='/myInfo' className=\"textLink\">\r\n                                        <Tooltip title={login.loginUser.userNm}>\r\n                                            <IconButton size=\"small\">\r\n                                                <AssignmentIndIcon className=\"userIcon\" fontSize=\"small\" />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                    </Link>\r\n                                </div>\r\n                                <div className=\"menuList\">\r\n                                    <IconButton size=\"small\">\r\n                                        <Tooltip title=\"로그아웃\">\r\n                                            <LockRoundedIcon className=\"userIcon\" fontSize=\"small\" onClick={handleLogout}/>\r\n                                        </Tooltip>\r\n                                    </IconButton>\r\n                                </div>\r\n                            </div>\r\n                        ):(\r\n                            <div className=\"rightMenu\">\r\n                                <div className=\"menuList\">\r\n                                    <Tooltip title=\"로그인\">\r\n                                    <IconButton size=\"small\">\r\n                                        <Link to=\"/login\" className=\"textLink\">\r\n                                            <LockOpenRoundedIcon className=\"userIcon\" fontSize=\"small\"/>\r\n                                        </Link>\r\n                                    </IconButton>\r\n                                    </Tooltip>\r\n                                </div>\r\n                                <div className=\"menuList\">\r\n                                    <Tooltip title=\"회원가입\">\r\n                                        <IconButton size=\"small\">\r\n                                            <Link to=\"/regist\" className=\"textLink\">\r\n                                                <PersonAddRoundedIcon className=\"userIcon\" fontSize=\"small\"/>\r\n                                            </Link>\r\n                                        </IconButton>\r\n                                    </Tooltip>\r\n                                </div>\r\n                            </div>  \r\n                        )}\r\n                    </List>\r\n                </Container>\r\n            </AppBar>\r\n            <div className=\"background\">\r\n            </div>\r\n        </div>\r\n    );   \r\n\r\n}","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\main\\UserLoginViewPage.jsx",[],"C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\user\\UserRegistViewPage.jsx",["123","124"],"import React, { useState } from 'react';\r\nimport { Redirect, Link } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport UserAPIRoute from '../../router/libs/UserAPIRoute';\r\nimport RootActions from '../../libs/reducer/RootActions';\r\n\r\nimport {Button, Container, CssBaseline, TextField, Typography} from '@material-ui/core';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\nimport AccountCircleRoundedIcon from '@material-ui/icons/AccountCircleRounded';\r\nimport CheckCircleRoundedIcon from '@material-ui/icons/CheckCircleRounded';\r\nimport CancelRoundedIcon from '@material-ui/icons/CancelRounded';\r\n\r\n\r\nimport '../../css/common/common.css';\r\n\r\nexport default function UserRegistView () {\r\n\r\n    // 유저정보\r\n    const [ user, setUser ] = useState({\r\n              userId: ''\r\n            , password: ''\r\n            , userNm: ''\r\n            , nickNm: ''\r\n    });\r\n\r\n    const [ error, setError ] = useState({});\r\n\r\n    const regist = useSelector(state => state.UserReducer);\r\n    const dispatch = useDispatch();\r\n\r\n    // form 데이터 생성\r\n\r\n    const handleValidation = (event) => {\r\n        console.log(event.target.value);\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        const target = event.target;\r\n        const value  = target.value;\r\n        const name   = target.name;\r\n\r\n        setUser(\r\n            {   \r\n                ...user\r\n              , [name]: value\r\n            }\r\n        );\r\n    }\r\n\r\n    // form 데이터 전송\r\n    const handleSubmit = (event) => {\r\n        const params = user;\r\n\r\n        UserAPIRoute.fetchRegistUsers(params)\r\n            .then( res => {\r\n                const data = res.data;\r\n                \r\n                if(data.regist){\r\n                    if(window.confirm(data.message)){\r\n                        dispatch(\r\n                            RootActions.UserReducerAction.regist(\r\n                                {\r\n                                      isRegist: true\r\n                                }\r\n                            )\r\n                        );\r\n                    }\r\n                } else {\r\n                    alert(data.message);\r\n                }\r\n\r\n            });\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    if(!regist.isRegist){\r\n        return(\r\n            <Container className=\"bodyContainer\" component=\"main\" maxWidth=\"xs\" color=\"inherit\">\r\n                <CssBaseline />\r\n                <Typography className=\"logo\" align=\"center\">\r\n                    inssumnia\r\n                </Typography>\r\n                <form onSubmit={handleSubmit} method=\"post\">\r\n                    <div className=\"userBaiscField\">\r\n                        <TextField \r\n                            id=\"userId\" \r\n                            name=\"userId\" \r\n                            label=\"아이디\" \r\n                            value={user.userId} \r\n                            onChange={handleValidation}  \r\n                            margin=\"normal\"\r\n                            InputProps={\r\n                            {startAdornment:\r\n                                (<InputAdornment position=\"start\">\r\n                                    <AccountCircleRoundedIcon />\r\n                                </InputAdornment>)\r\n                            }}\r\n                            fullWidth required>\r\n                        </TextField>\r\n                        <TextField \r\n                            type=\"password\" \r\n                            id=\"password\" \r\n                            name=\"password\" \r\n                            label=\"비밀번호\" \r\n                            value={user.password}\r\n                            onChange={handleChange} \r\n                            margin=\"normal\" \r\n                            InputProps={\r\n                                {startAdornment:\r\n                                    (<InputAdornment position=\"start\">\r\n                                        <AccountCircleRoundedIcon />\r\n                                    </InputAdornment>)\r\n                                }}\r\n                            fullWidth required>\r\n                        </TextField>\r\n                    </div>\r\n                    <Divider/>\r\n                    <div className=\"userInfoField\">\r\n                        <TextField \r\n                            id=\"userNm\" \r\n                            name=\"userNm\" \r\n                            label=\"이름\" \r\n                            value={user.userNm}\r\n                            onChange={handleChange} \r\n                            margin=\"normal\" \r\n                            InputProps={\r\n                                {startAdornment:\r\n                                    (<InputAdornment position=\"start\">\r\n                                        <AccountCircleRoundedIcon />\r\n                                    </InputAdornment>)\r\n                                }}\r\n                            fullWidth>\r\n                        </TextField>\r\n                        <TextField \r\n                            id=\"nickNm\" \r\n                            name=\"nickNm\" \r\n                            label=\"별명\" \r\n                            value={user.nickNm}\r\n                            onChange={handleChange} \r\n                            margin=\"normal\" \r\n                            InputProps={\r\n                                {startAdornment:\r\n                                    (<InputAdornment position=\"start\">\r\n                                        <AccountCircleRoundedIcon />\r\n                                    </InputAdornment>)\r\n                                }}\r\n                            fullWidth>\r\n                        </TextField>\r\n                    </div>\r\n                    <Divider className=\"divider\"/>\r\n                    <div className=\"buttonField\">\r\n                        <Button type=\"submit\" className=\"btnVertical\" variant=\"contained\" color=\"primary\" startIcon={<CheckCircleRoundedIcon />} fullWidth>가입완료</Button>\r\n                        <Link to=\"/\" className=\"textLink\"><Button type=\"button\" className=\"btnVertical\" variant=\"contained\" color=\"secondary\" startIcon={<CancelRoundedIcon />} fullWidth>가입취소</Button></Link>\r\n                    </div>\r\n                </form>\r\n            </Container>\r\n        );\r\n    } else {\r\n        return (\r\n            <Redirect to=\"/login\"></Redirect>\r\n        );\r\n    }\r\n\r\n};\r\n","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\user\\UserInfoViewPage.jsx",["125","126","127"],"import { React, useState, useEffect } from 'react';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport UserAPIRoute from '../../router/libs/UserAPIRoute';\r\n\r\nimport { Button, Container, TextField } from '@material-ui/core';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nimport BackspaceRoundedIcon from '@material-ui/icons/BackspaceRounded';\r\nimport UpdateRoundedIcon from '@material-ui/icons/UpdateRounded';\r\nimport DeleteForeverRoundedIcon from '@material-ui/icons/DeleteForeverRounded';\r\nimport CancelRoundedIcon from '@material-ui/icons/CancelRounded';\r\nimport CheckCircleRoundedIcon from '@material-ui/icons/CheckCircleRounded';\r\n\r\nimport '../../css/common/common.css';\r\n\r\nexport default function UserInfoViewPage(props) {\r\n\r\n    const login = useSelector(state => state.UserReducer);\r\n\r\n    const { userId } = props.match.params;\r\n    const [ user, setUser ] = useState({});\r\n\r\n    const [ isUpdate, setIsUpdate ] = useState(false);\r\n\r\n    async function fetchData(){\r\n        const result = await UserAPIRoute.fetchUserInfo(userId);\r\n        const data = result.data;\r\n\r\n        setUser(data);\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    },[]);\r\n\r\n    const handleIsUpdate = (event) =>\r\n    {\r\n        if(isUpdate){\r\n            setIsUpdate(false);\r\n        } else {\r\n            setIsUpdate(true);\r\n        }\r\n        \r\n        event.preventDefault();\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n\r\n        const target = event.target;\r\n        const value  = target.value;\r\n        const name   = target.name;\r\n\r\n        setUser(\r\n            {   \r\n                ...user\r\n              , [name]: value\r\n            }\r\n        );\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        const params = user;\r\n        console.log(\"submit==>\", params);\r\n\r\n        UserAPIRoute.fetchUpdateUsers(params)\r\n                    .then( res => {\r\n                        const data = res.data;\r\n\r\n                        if(data.update){\r\n                            if(window.confirm(data.message)){\r\n                                setIsUpdate(false);\r\n                                fetchData();\r\n                            }\r\n                        } else {\r\n                            alert(data.message);\r\n                        }\r\n                    });\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    if(isUpdate) {\r\n        return(\r\n            <Container className=\"container\" component=\"main\" maxWidth=\"lg\" color=\"inherit\">\r\n    \r\n                <div className=\"btnRightField\">\r\n                    <Link to=\"/admin/user/list\" className=\"textLink\">\r\n                        <Button className=\"btnRight\" variant=\"contained\" color=\"inherit\" size=\"small\" startIcon={<BackspaceRoundedIcon />}>목록</Button>\r\n                    </Link>\r\n                    <Button className=\"btnRight\" variant=\"contained\" color=\"secondary\" size=\"small\" onClick={handleIsUpdate} startIcon={<CancelRoundedIcon />}>취소</Button>\r\n                    <Button className=\"btnRight\" variant=\"contained\" color=\"secondary\" size=\"small\" startIcon={<DeleteForeverRoundedIcon />}>삭제</Button>\r\n                </div>\r\n                <form onSubmit={handleSubmit} method=\"post\">\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={12}>\r\n                            <TableContainer>\r\n                                <Table id=\"table\" size=\"small\">\r\n                                    <TableHead className=\"tableHeader\">\r\n                                        <TableCell>아이디</TableCell>\r\n                                        <TableCell>{user.userId}</TableCell>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        <TableRow>\r\n                                            <TableCell>이름</TableCell>\r\n                                            <TableCell><TextField id=\"userNm\" name=\"userNm\" value={user.userNm} onChange={handleChange} size=\"small\"></TextField></TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell>비밀번호</TableCell>\r\n                                            <TableCell><TextField type=\"password\" id=\"password\" name=\"password\" value={user.password} onChange={handleChange} size=\"small\" required></TextField></TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell>별명</TableCell>\r\n                                            <TableCell><TextField id=\"nickNm\" name=\"nickNm\" value={user.nickNm} onChange={handleChange} size=\"small\"></TextField></TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell>권한</TableCell>\r\n                                            <TableCell>{user.roleNm}</TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell>등록일시</TableCell>\r\n                                            <TableCell>{user.recentLoginDatetime}</TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell>접속일시</TableCell>\r\n                                            <TableCell>{user.createDatetime}</TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell>수정자</TableCell>\r\n                                            <TableCell>{user.updateUserId}</TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell>수정일시</TableCell>\r\n                                            <TableCell>{user.updateDatetime}</TableCell>\r\n                                        </TableRow>\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                        </Grid>\r\n                    </Grid>\r\n                \r\n                    <div className=\"btnRightField\">\r\n                        <Button  type=\"submit\" className=\"btnRight\" variant=\"contained\" color=\"primary\" size=\"small\" startIcon={<CheckCircleRoundedIcon />}>수정</Button>\r\n                    </div>\r\n                </form>\r\n            </Container>\r\n        );\r\n    } else {\r\n        return(\r\n            <Container className=\"container\" component=\"main\" maxWidth=\"lg\" color=\"inherit\">\r\n    \r\n                <div className=\"btnRightField\">\r\n                    <Link to=\"/admin/user/list\" className=\"textLink\">\r\n                        <Button className=\"btnRight\" variant=\"contained\" color=\"inherit\" size=\"small\" startIcon={<BackspaceRoundedIcon />}>목록</Button>\r\n                    </Link>\r\n                    <Button className=\"btnRight\" variant=\"contained\" color=\"primary\" size=\"small\" onClick={handleIsUpdate} startIcon={<UpdateRoundedIcon />}>수정</Button>\r\n                    <Button className=\"btnRight\" variant=\"contained\" color=\"secondary\" size=\"small\" startIcon={<DeleteForeverRoundedIcon />}>삭제</Button>\r\n                </div>\r\n                \r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12}>\r\n                        <TableContainer>\r\n                            <Table id=\"table\" size=\"small\">\r\n                                <TableHead className=\"tableHeader\">\r\n                                    <TableCell>아이디</TableCell>\r\n                                    <TableCell>{user.userId}</TableCell>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    <TableRow>\r\n                                        <TableCell>이름</TableCell>\r\n                                        <TableCell>{user.userNm}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell>별명</TableCell>\r\n                                        <TableCell>{user.nickNm}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell>권한</TableCell>\r\n                                        <TableCell>{user.roleNm}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell>등록일시</TableCell>\r\n                                        <TableCell>{user.createDatetime}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell>접속일시</TableCell>\r\n                                        <TableCell>{user.recentLoginDatetime}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell>수정자</TableCell>\r\n                                        <TableCell>{user.updateUserId}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell>수정일시</TableCell>\r\n                                        <TableCell>{user.updateDatetime}</TableCell>\r\n                                    </TableRow>\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n}","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\user\\UserListViewPage.jsx",["128"],"import { useState, useEffect } from 'react';\r\nimport { Link, Redirect } from 'react-router-dom';\r\n\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport UserAPIRoute from '../../router/libs/UserAPIRoute';\r\n\r\nimport { Container } from '@material-ui/core';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nimport '../../css/common/common.css';\r\nimport '../../css/common/commonTable.css';\r\nimport '../../css/user/UserListView.css';\r\n\r\n\r\n\r\n\r\nexport default function UserListViewPage() {\r\n\r\n    const login = useSelector(state => state.UserReducer);\r\n\r\n    const [list, setList] = useState([]);\r\n\r\n    async function fetchData(){\r\n        const result = await UserAPIRoute.fetchUserList();\r\n        const data = result.data;\r\n\r\n        setList(data);\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, []);\r\n\r\n    if(login.isLogin){\r\n        return(\r\n            <Container className=\"container\" component=\"main\" maxWidth=\"lg\" color=\"inherit\">\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12}>\r\n                        <TableContainer>\r\n                            <Table id=\"table\" size=\"small\">\r\n                                <TableHead className=\"tableHeader\">\r\n                                    <TableCell className=\"header\">아이디</TableCell>\r\n                                    <TableCell className=\"header\">이름</TableCell>\r\n                                    <TableCell className=\"header\">별명</TableCell>\r\n                                    <TableCell className=\"header\">권한</TableCell>\r\n                                    <TableCell className=\"header\">등록일</TableCell>\r\n                                    <TableCell className=\"header\">수정자</TableCell>\r\n                                    <TableCell className=\"header\">등록일</TableCell>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {list.map((item, index) => (\r\n                                        <TableRow key={index}>\r\n                                            <TableCell>\r\n                                                <Link to={`/admin/user/info/${item.userId}`} className=\"textLink\">\r\n                                                    {item.userId}\r\n                                                </Link>\r\n                                            </TableCell>\r\n                                            <TableCell>{item.userNm}</TableCell>\r\n                                            <TableCell>{item.nickNm}</TableCell>\r\n                                            <TableCell>{item.roleNm}</TableCell>\r\n                                            <TableCell>{item.createDatetime}</TableCell>\r\n                                            <TableCell>{item.updateUserId}</TableCell>\r\n                                            <TableCell>{item.updateDatetime}</TableCell>\r\n                                        </TableRow>\r\n                                    ))}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        );\r\n    } else {\r\n        return (\r\n            <Redirect to='/error/auth' />\r\n        );\r\n    }\r\n\r\n}","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\error\\NotFoundErrorPage.jsx",["129"],"import {Button, Container, Divider} from '@material-ui/core';\r\nimport PanToolRoundedIcon from '@material-ui/icons/PanToolRounded';\r\n\r\nexport default function NotFoundErrorPage() {\r\n    return (\r\n        <Container className=\"bodyContainer\" component=\"main\" maxWidth=\"xs\">\r\n            <PanToolRoundedIcon/>\r\n            <Divider/>\r\n            <p>NOT FOUND!!</p>\r\n        </Container>\r\n    )\r\n}","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\error\\AccessErrorPage.jsx",[],"C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\error\\AuthoriziedErrorPage.jsx",["130"],"import {Link} from 'react-router-dom';\r\nimport {Button, Container, Divider} from '@material-ui/core';\r\nimport PanToolRoundedIcon from '@material-ui/icons/PanToolRounded';\r\nimport PersonRoundedIcon from '@material-ui/icons/PersonRounded';\r\n\r\nexport default function AuthoriziedErrorPage() {\r\n    return (\r\n        <Container className=\"bodyContainer\" component=\"main\" maxWidth=\"xs\">\r\n            <PanToolRoundedIcon/>\r\n            <Divider/>\r\n            <p>PLEASE LOGIN .... </p>\r\n            <div className=\"buttonField\">\r\n                <Link to=\"/login\" className=\"textLink\">\r\n                    <Button type=\"button\" className=\"btnVertical\" variant=\"contained\" color=\"primary\" className=\"regist\" margin=\"normal\" startIcon={<PersonRoundedIcon fontSize=\"small\"/>} fullWidth>\r\n                        로그인\r\n                    </Button>\r\n                </Link>\r\n            </div>\r\n        </Container>\r\n    )\r\n}","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\libs\\reducer\\RootActions.js",[],"C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\router\\libs\\UserAPIRoute.js",[],"C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\libs\\reducer\\user\\action\\UserReducerAction.js",["131"],"const regist = () => {\r\n    return {\r\n        type: 'USER_REGIST'\r\n    };\r\n};\r\n\r\nconst login = data => {\r\n    return {\r\n          type: 'USER_LOGIN'\r\n        , data\r\n    };\r\n};\r\n\r\nconst logout = () => {\r\n    return {\r\n        type: 'USER_LOGOUT'\r\n    }\r\n}\r\n\r\nexport default { \r\n        regist\r\n    ,   login\r\n    ,   logout\r\n};","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\admin\\MenuMgmtViewPage.jsx",["132","133","134","135"],"C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\router\\libs\\MainAPIRoute.js",[],"C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\libs\\reducer\\menu\\action\\MenuReducerAction.js",["136"],"const menu = data => {\r\n    return {\r\n        type: 'MENU'\r\n        , data\r\n    };\r\n};\r\n\r\nexport default { \r\n    menu\r\n};","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\libs\\reducer\\menu\\reducer\\MenuReducer.js",[],"C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\user\\MyInfoViewPage.jsx",["137","138"],"import { React, useState, useEffect } from 'react';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport UserAPIRoute from '../../router/libs/UserAPIRoute';\r\n\r\nimport { Button, Container, TextField } from '@material-ui/core';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nimport UpdateRoundedIcon from '@material-ui/icons/UpdateRounded';\r\nimport CancelRoundedIcon from '@material-ui/icons/CancelRounded';\r\nimport CheckCircleRoundedIcon from '@material-ui/icons/CheckCircleRounded';\r\n\r\nimport '../../css/common/common.css';\r\n\r\nexport default function MyInfoViewPage(props) {\r\n\r\n    const login = useSelector(state => state.UserReducer);\r\n\r\n    const [ user, setUser ] = useState({});\r\n    const [ isUpdate, setIsUpdate ] = useState(false);\r\n\r\n    async function fetchData(){\r\n        const result = await UserAPIRoute.fetchUserInfo(login.loginUser.userId);\r\n        const data = result.data;\r\n\r\n        setUser(data);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if(login.loginUser != null){\r\n            fetchData();\r\n        }  \r\n    },[]);\r\n\r\n\r\n    const handleIsUpdate = (event) =>\r\n    {\r\n        if(isUpdate){\r\n            setIsUpdate(false);\r\n        } else {\r\n            setIsUpdate(true);\r\n        }\r\n        \r\n        event.preventDefault();\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n\r\n        const target = event.target;\r\n        const value  = target.value;\r\n        const name   = target.name;\r\n\r\n        setUser(\r\n            {   \r\n                ...user\r\n              , [name]: value\r\n            }\r\n        );\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        const params = user;\r\n        console.log(\"submit==>\", params);\r\n\r\n        UserAPIRoute.fetchUpdateUsers(params)\r\n                    .then( res => {\r\n                        const data = res.data;\r\n\r\n                        if(data.update){\r\n                            if(window.confirm(data.message)){\r\n                                setIsUpdate(false);\r\n                                fetchData();\r\n                            }\r\n                        } else {\r\n                            alert(data.message);\r\n                        }\r\n                    });\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    if(login.isLogin) { \r\n        if(isUpdate) {\r\n            return(\r\n                <Container className=\"container\" component=\"main\" maxWidth=\"lg\" color=\"inherit\">\r\n        \r\n                    <div className=\"btnRightField\">\r\n                    <Button  type=\"submit\" className=\"btnRight\" variant=\"contained\" color=\"primary\" size=\"small\" startIcon={<CheckCircleRoundedIcon />}>수정</Button>\r\n                        <Button className=\"btnRight\" variant=\"contained\" color=\"secondary\" size=\"small\" onClick={handleIsUpdate} startIcon={<CancelRoundedIcon />}>취소</Button>\r\n                    </div>\r\n                    <form onSubmit={handleSubmit} method=\"post\">\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={12}>\r\n                                <TableContainer>\r\n                                    <Table id=\"table\" size=\"small\">\r\n                                        <TableHead className=\"tableHeader\">\r\n                                            <TableCell>아이디</TableCell>\r\n                                            <TableCell>{login.loginUser.userId}</TableCell>\r\n                                        </TableHead>\r\n                                        <TableBody>\r\n                                            <TableRow>\r\n                                                <TableCell>이름</TableCell>\r\n                                                <TableCell><TextField id=\"userNm\" name=\"userNm\" value={login.loginUser.userNm} onChange={handleChange} size=\"small\"></TextField></TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell>비밀번호</TableCell>\r\n                                                <TableCell><TextField type=\"password\" id=\"password\" name=\"password\" value={login.loginUser.password} onChange={handleChange} size=\"small\" required></TextField></TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell>별명</TableCell>\r\n                                                <TableCell><TextField id=\"nickNm\" name=\"nickNm\" value={login.loginUser.nickNm} onChange={handleChange} size=\"small\"></TextField></TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell>권한</TableCell>\r\n                                                <TableCell>{login.loginUser.roleNm}</TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell>등록일시</TableCell>\r\n                                                <TableCell>{login.loginUser.recentLoginDatetime}</TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell>접속일시</TableCell>\r\n                                                <TableCell>{login.loginUser.createDatetime}</TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell>수정자</TableCell>\r\n                                                <TableCell>{login.loginUser.updateUserId}</TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell>수정일시</TableCell>\r\n                                                <TableCell>{login.loginUser.updateDatetime}</TableCell>\r\n                                            </TableRow>\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </TableContainer>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                </Container>\r\n            );\r\n        } else {\r\n            return(\r\n                <Container className=\"container\" component=\"main\" maxWidth=\"lg\" color=\"inherit\">\r\n        \r\n                    <div className=\"btnRightField\">\r\n                        <Button className=\"btnRight\" variant=\"contained\" color=\"primary\" size=\"small\" onClick={handleIsUpdate} startIcon={<UpdateRoundedIcon />}>수정</Button>\r\n                    </div>\r\n                    \r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={12}>\r\n                            <TableContainer>\r\n                                <Table id=\"table\" size=\"small\">\r\n                                    <TableHead className=\"tableHeader\">\r\n                                        <TableCell>아이디</TableCell>\r\n                                        <TableCell>{login.loginUser.userId}</TableCell>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        <TableRow>\r\n                                            <TableCell>이름</TableCell>\r\n                                            <TableCell>{login.loginUser.userNm}</TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell>별명</TableCell>\r\n                                            <TableCell>{login.loginUser.nickNm}</TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell>권한</TableCell>\r\n                                            <TableCell>{login.loginUser.roleNm}</TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell>등록일시</TableCell>\r\n                                            <TableCell>{login.loginUser.createDatetime}</TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell>접속일시</TableCell>\r\n                                            <TableCell>{login.loginUser.recentLoginDatetime}</TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell>수정자</TableCell>\r\n                                            <TableCell>{login.loginUser.updateUserId}</TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell>수정일시</TableCell>\r\n                                            <TableCell>{login.loginUser.updateDatetime}</TableCell>\r\n                                        </TableRow>\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Container>\r\n            );\r\n        }\r\n    } else {\r\n        return (\r\n            <Redirect to='/error/auth'/>\r\n        )\r\n    }\r\n    \r\n\r\n}","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\router\\libs\\MenuAPIRoute.js",[],"C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\common\\community\\CommunityViewPage.jsx",[],{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","severity":1,"message":"144","line":1,"column":17,"nodeType":"145","messageId":"146","endLine":1,"endColumn":26},{"ruleId":"143","severity":1,"message":"147","line":1,"column":28,"nodeType":"145","messageId":"146","endLine":1,"endColumn":36},{"ruleId":"143","severity":1,"message":"148","line":2,"column":23,"nodeType":"145","messageId":"146","endLine":2,"endColumn":34},{"ruleId":"143","severity":1,"message":"149","line":3,"column":10,"nodeType":"145","messageId":"146","endLine":3,"endColumn":14},{"ruleId":"143","severity":1,"message":"150","line":5,"column":8,"nodeType":"145","messageId":"146","endLine":5,"endColumn":20},{"ruleId":"143","severity":1,"message":"151","line":9,"column":8,"nodeType":"145","messageId":"146","endLine":9,"endColumn":12},{"ruleId":"143","severity":1,"message":"152","line":10,"column":8,"nodeType":"145","messageId":"146","endLine":10,"endColumn":22},{"ruleId":"143","severity":1,"message":"153","line":11,"column":8,"nodeType":"145","messageId":"146","endLine":11,"endColumn":19},{"ruleId":"143","severity":1,"message":"154","line":12,"column":8,"nodeType":"145","messageId":"146","endLine":12,"endColumn":19},{"ruleId":"143","severity":1,"message":"155","line":13,"column":8,"nodeType":"145","messageId":"146","endLine":13,"endColumn":17},{"ruleId":"143","severity":1,"message":"156","line":14,"column":8,"nodeType":"145","messageId":"146","endLine":14,"endColumn":13},{"ruleId":"143","severity":1,"message":"157","line":15,"column":8,"nodeType":"145","messageId":"146","endLine":15,"endColumn":18},{"ruleId":"143","severity":1,"message":"158","line":19,"column":11,"nodeType":"145","messageId":"146","endLine":19,"endColumn":16},{"ruleId":"159","severity":1,"message":"160","line":45,"column":15,"nodeType":"161","endLine":53,"endColumn":6},{"ruleId":"159","severity":1,"message":"162","line":53,"column":8,"nodeType":"163","endLine":53,"endColumn":23,"suggestions":"164"},{"ruleId":"165","severity":1,"message":"166","line":120,"column":61,"nodeType":"167","messageId":"168","endLine":120,"endColumn":63},{"ruleId":"143","severity":1,"message":"169","line":30,"column":13,"nodeType":"145","messageId":"146","endLine":30,"endColumn":18},{"ruleId":"143","severity":1,"message":"170","line":30,"column":20,"nodeType":"145","messageId":"146","endLine":30,"endColumn":28},{"ruleId":"143","severity":1,"message":"171","line":2,"column":16,"nodeType":"145","messageId":"146","endLine":2,"endColumn":24},{"ruleId":"143","severity":1,"message":"158","line":27,"column":11,"nodeType":"145","messageId":"146","endLine":27,"endColumn":16},{"ruleId":"159","severity":1,"message":"172","line":43,"column":7,"nodeType":"163","endLine":43,"endColumn":9,"suggestions":"173"},{"ruleId":"143","severity":1,"message":"174","line":9,"column":10,"nodeType":"145","messageId":"146","endLine":9,"endColumn":18},{"ruleId":"143","severity":1,"message":"175","line":1,"column":9,"nodeType":"145","messageId":"146","endLine":1,"endColumn":15},{"ruleId":"176","severity":1,"message":"177","line":14,"column":103,"nodeType":"178","endLine":14,"endColumn":121},{"ruleId":"179","severity":1,"message":"180","line":20,"column":1,"nodeType":"181","endLine":24,"endColumn":3},{"ruleId":"143","severity":1,"message":"182","line":7,"column":79,"nodeType":"145","messageId":"146","endLine":7,"endColumn":88},{"ruleId":"143","severity":1,"message":"156","line":7,"column":124,"nodeType":"145","messageId":"146","endLine":7,"endColumn":129},{"ruleId":"143","severity":1,"message":"183","line":7,"column":131,"nodeType":"145","messageId":"146","endLine":7,"endColumn":137},{"ruleId":"165","severity":1,"message":"166","line":57,"column":19,"nodeType":"167","messageId":"168","endLine":57,"endColumn":21},{"ruleId":"179","severity":1,"message":"180","line":8,"column":1,"nodeType":"181","endLine":10,"endColumn":3},{"ruleId":"143","severity":1,"message":"149","line":2,"column":10,"nodeType":"145","messageId":"146","endLine":2,"endColumn":14},{"ruleId":"159","severity":1,"message":"184","line":41,"column":7,"nodeType":"163","endLine":41,"endColumn":9,"suggestions":"185"},"no-native-reassign",["186"],"no-negated-in-lhs",["187"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'useDispatch' is defined but never used.","'Link' is defined but never used.","'MainAPIRoute' is defined but never used.","'Card' is defined but never used.","'CardActionArea' is defined but never used.","'CardActions' is defined but never used.","'CardContent' is defined but never used.","'CardMedia' is defined but never used.","'Paper' is defined but never used.","'Typography' is defined but never used.","'login' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'login'. Either include it or remove the dependency array.","ArrayExpression",["188"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'error' is assigned a value but never used.","'setError' is assigned a value but never used.","'Redirect' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["189"],"'DataGrid' is defined but never used.","'Button' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'FormLabel' is defined but never used.","'Switch' is defined but never used.","React Hook useEffect has missing dependencies: 'fetchData' and 'login.loginUser'. Either include them or remove the dependency array.",["190"],"no-global-assign","no-unsafe-negation",{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},"Update the dependencies array to be: [login, login.isLogin]",{"range":"197","text":"198"},"Update the dependencies array to be: [fetchData]",{"range":"199","text":"200"},"Update the dependencies array to be: [fetchData, login.loginUser]",{"range":"201","text":"202"},[1737,1752],"[login, login.isLogin]",[1545,1547],"[fetchData]",[1414,1416],"[fetchData, login.loginUser]"]