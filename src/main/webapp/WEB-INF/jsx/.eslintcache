[{"C:\\pjt\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\index.js":"1","C:\\pjt\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\reportWebVitals.js":"2","C:\\pjt\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\App.js":"3","C:\\pjt\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\user\\UserListViewPage.jsx":"4","C:\\pjt\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\main\\MainViewPage.jsx":"5","C:\\pjt\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\user\\UserRegistViewPage.jsx":"6","C:\\pjt\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\common\\MenuLayout.jsx":"7","C:\\pjt\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\main\\UserLoginViewPage.jsx":"8","C:\\pjt\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\router\\libs\\UserAPIRoute.js":"9","C:\\pjt\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\user\\UserInfoViewPage.jsx":"10"},{"size":517,"mtime":1611033689207,"results":"11","hashOfConfig":"12"},{"size":375,"mtime":1611033689207,"results":"13","hashOfConfig":"12"},{"size":1004,"mtime":1611219308886,"results":"14","hashOfConfig":"12"},{"size":3046,"mtime":1611132742858,"results":"15","hashOfConfig":"12"},{"size":94,"mtime":1611045001934,"results":"16","hashOfConfig":"12"},{"size":3578,"mtime":1611135024398,"results":"17","hashOfConfig":"12"},{"size":7069,"mtime":1611220419511,"results":"18","hashOfConfig":"12"},{"size":2850,"mtime":1611220426078,"results":"19","hashOfConfig":"12"},{"size":711,"mtime":1611217595463,"results":"20","hashOfConfig":"12"},{"size":9257,"mtime":1611134609435,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1041kao",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"24"},"C:\\pjt\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\index.js",[],["44","45"],"C:\\pjt\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\reportWebVitals.js",[],"C:\\pjt\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\App.js",[],"C:\\pjt\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\user\\UserListViewPage.jsx",[],"C:\\pjt\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\main\\MainViewPage.jsx",[],"C:\\pjt\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\user\\UserRegistViewPage.jsx",[],"C:\\pjt\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\common\\MenuLayout.jsx",["46","47"],"C:\\pjt\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\main\\UserLoginViewPage.jsx",["48","49","50"],"C:\\pjt\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\router\\libs\\UserAPIRoute.js",[],"C:\\pjt\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\user\\UserInfoViewPage.jsx",["51","52","53"],"import { React, useState, useEffect } from 'react';\r\nimport { Link, Redirect } from 'react-router-dom';\r\n\r\nimport UserAPIRoute from '../../router/libs/UserAPIRoute';\r\n\r\nimport { Button, Container, TextField } from '@material-ui/core';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nimport BackspaceRoundedIcon from '@material-ui/icons/BackspaceRounded';\r\nimport UpdateRoundedIcon from '@material-ui/icons/UpdateRounded';\r\nimport DeleteForeverRoundedIcon from '@material-ui/icons/DeleteForeverRounded';\r\nimport CancelRoundedIcon from '@material-ui/icons/CancelRounded';\r\nimport CheckCircleRoundedIcon from '@material-ui/icons/CheckCircleRounded';\r\n\r\nimport '../../css/common/common.css';\r\n\r\nexport default function UserInfoViewPage(props) {\r\n\r\n    const { userId } = props.match.params;\r\n    const [ user, setUser ] = useState({});\r\n\r\n    const [ isUpdate, setIsUpdate ] = useState(false);\r\n\r\n    async function fetchData(){\r\n        const result = await UserAPIRoute.fetchUserInfo(userId);\r\n        const data = result.data;\r\n\r\n        setUser(result.data);\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    },[]);\r\n\r\n    const handleIsUpdate = (event) =>\r\n    {\r\n        if(isUpdate){\r\n            setIsUpdate(false);\r\n        } else {\r\n            setIsUpdate(true);\r\n        }\r\n        \r\n        event.preventDefault();\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n\r\n        const target = event.target;\r\n        const value  = target.value;\r\n        const name   = target.name;\r\n\r\n        setUser(\r\n            {   \r\n                ...user\r\n              , [name]: value\r\n            }\r\n        );\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        const params = user;\r\n        console.log(\"submit==>\", params);\r\n\r\n        UserAPIRoute.fetchUpdateUsers(params)\r\n                    .then( res => {\r\n                        const data = res.data;\r\n\r\n                        if(data.update){\r\n                            if(window.confirm(data.message)){\r\n                                setIsUpdate(false);\r\n                                fetchData();\r\n                            }\r\n                        } else {\r\n                            alert(data.message);\r\n                        }\r\n                    });\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    if(isUpdate) {\r\n        return(\r\n            <Container className=\"container\" component=\"main\" maxWidth=\"lg\" color=\"inherit\">\r\n    \r\n                <div className=\"btnRightField\">\r\n                    <Link to=\"/admin/user/list\" className=\"textLink\">\r\n                        <Button className=\"btnRight\" variant=\"contained\" color=\"inherit\" size=\"small\" startIcon={<BackspaceRoundedIcon />}>목록</Button>\r\n                    </Link>\r\n                    <Button className=\"btnRight\" variant=\"contained\" color=\"secondary\" size=\"small\" onClick={handleIsUpdate} startIcon={<CancelRoundedIcon />}>취소</Button>\r\n                    <Button className=\"btnRight\" variant=\"contained\" color=\"secondary\" size=\"small\" startIcon={<DeleteForeverRoundedIcon />}>삭제</Button>\r\n                </div>\r\n                <form onSubmit={handleSubmit} method=\"post\">\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={12}>\r\n                            <TableContainer>\r\n                                <Table id=\"table\" size=\"small\">\r\n                                    <TableHead className=\"tableHeader\">\r\n                                        <TableCell>아이디</TableCell>\r\n                                        <TableCell>{user.userId}</TableCell>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        <TableRow>\r\n                                            <TableCell>이름</TableCell>\r\n                                            <TableCell><TextField id=\"userNm\" name=\"userNm\" value={user.userNm} onChange={handleChange} size=\"small\"></TextField></TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell>비밀번호</TableCell>\r\n                                            <TableCell><TextField type=\"password\" id=\"password\" name=\"password\" value={user.password} onChange={handleChange} size=\"small\" required></TextField></TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell>별명</TableCell>\r\n                                            <TableCell><TextField id=\"nickNm\" name=\"nickNm\" value={user.nickNm} onChange={handleChange} size=\"small\"></TextField></TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell>등록일</TableCell>\r\n                                            <TableCell>{user.createDatetime}</TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell>수정자</TableCell>\r\n                                            <TableCell>{user.updateUserId}</TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell>수정일</TableCell>\r\n                                            <TableCell>{user.updateDatetime}</TableCell>\r\n                                        </TableRow>\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                        </Grid>\r\n                    </Grid>\r\n                \r\n                    <div className=\"btnRightField\">\r\n                        <Button  type=\"submit\" className=\"btnRight\" variant=\"contained\" color=\"primary\" size=\"small\" startIcon={<CheckCircleRoundedIcon />}>수정</Button>\r\n                    </div>\r\n                </form>\r\n            </Container>\r\n        );\r\n    } else {\r\n        return(\r\n            <Container className=\"container\" component=\"main\" maxWidth=\"lg\" color=\"inherit\">\r\n    \r\n                <div className=\"btnRightField\">\r\n                    <Link to=\"/admin/user/list\" className=\"textLink\">\r\n                        <Button className=\"btnRight\" variant=\"contained\" color=\"inherit\" size=\"small\" startIcon={<BackspaceRoundedIcon />}>목록</Button>\r\n                    </Link>\r\n                    <Button className=\"btnRight\" variant=\"contained\" color=\"primary\" size=\"small\" onClick={handleIsUpdate} startIcon={<UpdateRoundedIcon />}>수정</Button>\r\n                    <Button className=\"btnRight\" variant=\"contained\" color=\"secondary\" size=\"small\" startIcon={<DeleteForeverRoundedIcon />}>삭제</Button>\r\n                </div>\r\n                \r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12}>\r\n                        <TableContainer>\r\n                            <Table id=\"table\" size=\"small\">\r\n                                <TableHead className=\"tableHeader\">\r\n                                    <TableCell>아이디</TableCell>\r\n                                    <TableCell>{user.userId}</TableCell>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    <TableRow>\r\n                                        <TableCell>이름</TableCell>\r\n                                        <TableCell>{user.userNm}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell>별명</TableCell>\r\n                                        <TableCell>{user.nickNm}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell>등록일</TableCell>\r\n                                        <TableCell>{user.createDatetime}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell>수정자</TableCell>\r\n                                        <TableCell>{user.updateUserId}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell>수정일</TableCell>\r\n                                        <TableCell>{user.updateDatetime}</TableCell>\r\n                                    </TableRow>\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n}",{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":88,"column":21,"nodeType":"60","endLine":88,"endColumn":73},{"ruleId":"58","severity":1,"message":"59","line":140,"column":21,"nodeType":"60","endLine":140,"endColumn":73},{"ruleId":"61","severity":1,"message":"62","line":20,"column":13,"nodeType":"63","messageId":"64","endLine":20,"endColumn":21},{"ruleId":"61","severity":1,"message":"65","line":20,"column":23,"nodeType":"63","messageId":"64","endLine":20,"endColumn":34},{"ruleId":"66","severity":1,"message":"67","line":73,"column":147,"nodeType":"68","endLine":73,"endColumn":165},{"ruleId":"61","severity":1,"message":"69","line":2,"column":16,"nodeType":"63","messageId":"64","endLine":2,"endColumn":24},{"ruleId":"61","severity":1,"message":"70","line":33,"column":15,"nodeType":"63","messageId":"64","endLine":33,"endColumn":19},{"ruleId":"71","severity":1,"message":"72","line":40,"column":7,"nodeType":"73","endLine":40,"endColumn":9,"suggestions":"74"},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'isLogout' is assigned a value but never used.","Identifier","unusedVar","'SetIsLogout' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Redirect' is defined but never used.","'data' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["77"],"no-global-assign","no-unsafe-negation",{"desc":"78","fix":"79"},"Update the dependencies array to be: [fetchData]",{"range":"80","text":"81"},[1446,1448],"[fetchData]"]