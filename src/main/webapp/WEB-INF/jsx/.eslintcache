[{"C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\index.js":"1","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\App.js":"2","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\libs\\reducer\\RootReducer.js":"3","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\libs\\reducer\\user\\reducer\\UserReducer.js":"4","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\main\\MainViewPage.jsx":"5","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\common\\MenuLayout.jsx":"6","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\main\\UserLoginViewPage.jsx":"7","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\user\\UserRegistViewPage.jsx":"8","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\user\\UserInfoViewPage.jsx":"9","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\user\\UserListViewPage.jsx":"10","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\error\\NotFoundErrorPage.jsx":"11","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\error\\AccessErrorPage.jsx":"12","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\error\\AuthoriziedErrorPage.jsx":"13","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\libs\\reducer\\RootActions.js":"14","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\router\\libs\\UserAPIRoute.js":"15","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\libs\\reducer\\user\\action\\UserReducerAction.js":"16","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\admin\\MenuMgmtViewPage.jsx":"17","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\router\\libs\\MainAPIRoute.js":"18","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\libs\\reducer\\menu\\action\\MenuReducerAction.js":"19","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\libs\\reducer\\menu\\reducer\\MenuReducer.js":"20","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\user\\MyInfoViewPage.jsx":"21","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\router\\libs\\MenuAPIRoute.js":"22","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\router\\libs\\CommunityAPIRoute.js":"23","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\common\\community\\CommunityWriteViewPage.jsx":"24","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\common\\community\\CommunityListViewPage.jsx":"25","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\common\\community\\CommunityViewPage.jsx":"26","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\router\\libs\\ReplyAPIRoute.js":"27"},{"size":411,"mtime":1611714330092,"results":"28","hashOfConfig":"29"},{"size":2747,"mtime":1612770454685,"results":"30","hashOfConfig":"29"},{"size":291,"mtime":1611637329108,"results":"31","hashOfConfig":"29"},{"size":827,"mtime":1612169590410,"results":"32","hashOfConfig":"29"},{"size":384,"mtime":1612429044502,"results":"33","hashOfConfig":"29"},{"size":9256,"mtime":1612748193342,"results":"34","hashOfConfig":"29"},{"size":5517,"mtime":1612170769419,"results":"35","hashOfConfig":"29"},{"size":6465,"mtime":1612429056350,"results":"36","hashOfConfig":"29"},{"size":10263,"mtime":1612430518072,"results":"37","hashOfConfig":"29"},{"size":3642,"mtime":1612429065861,"results":"38","hashOfConfig":"29"},{"size":394,"mtime":1611296139128,"results":"39","hashOfConfig":"29"},{"size":391,"mtime":1611296139127,"results":"40","hashOfConfig":"29"},{"size":921,"mtime":1611296139128,"results":"41","hashOfConfig":"29"},{"size":240,"mtime":1611711662686,"results":"42","hashOfConfig":"29"},{"size":787,"mtime":1611560749568,"results":"43","hashOfConfig":"29"},{"size":327,"mtime":1612170747194,"results":"44","hashOfConfig":"29"},{"size":23562,"mtime":1612423053256,"results":"45","hashOfConfig":"29"},{"size":216,"mtime":1611729126495,"results":"46","hashOfConfig":"29"},{"size":121,"mtime":1611637819543,"results":"47","hashOfConfig":"29"},{"size":349,"mtime":1611712749733,"results":"48","hashOfConfig":"29"},{"size":10113,"mtime":1611728811128,"results":"49","hashOfConfig":"29"},{"size":795,"mtime":1612423065142,"results":"50","hashOfConfig":"29"},{"size":1072,"mtime":1612774825830,"results":"51","hashOfConfig":"29"},{"size":7053,"mtime":1612770673269,"results":"52","hashOfConfig":"29"},{"size":10943,"mtime":1612855964037,"results":"53","hashOfConfig":"29"},{"size":19019,"mtime":1612856253431,"results":"54","hashOfConfig":"29"},{"size":274,"mtime":1612837874247,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"homc1r",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"58"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"58"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"58"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"58"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"58"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"58"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"58"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"58"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"58"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"58"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\index.js",[],["121","122"],"C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\App.js",[],"C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\libs\\reducer\\RootReducer.js",[],"C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\libs\\reducer\\user\\reducer\\UserReducer.js",[],"C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\main\\MainViewPage.jsx",["123"],"import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { Container } from '@material-ui/core';\r\n\r\nexport default function MainViewPage() {\r\n\r\n    const login = useSelector(state => state.UserReducer);\r\n\r\n\r\n    return(\r\n        <Container className=\"bodyContainer\" component=\"main\" maxWidth=\"xl\" color=\"inherit\">\r\n            \r\n        </Container>\r\n    );\r\n}","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\common\\MenuLayout.jsx",["124","125","126"],"import React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport MainAPIRoute from '../../router/libs/MainAPIRoute';\r\nimport MenuAPIRoute from '../../router/libs/MenuAPIRoute';\r\nimport UserAPIRoute from '../../router/libs/UserAPIRoute';\r\n\r\nimport RootActions from '../../libs/reducer/RootActions';\r\n\r\nimport {AppBar, Container, List} from '@material-ui/core';\r\n\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nimport LockRoundedIcon from '@material-ui/icons/LockRounded';\r\nimport LockOpenRoundedIcon from '@material-ui/icons/LockOpenRounded';\r\nimport PersonAddRoundedIcon from '@material-ui/icons/PersonAddRounded';\r\nimport AssignmentIndIcon from '@material-ui/icons/AssignmentInd';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport 'fontsource-roboto';\r\n\r\nimport '../../css/common/common.css';\r\n\r\nexport default function MenuLayout(){\r\n\r\n    const [ menu, setMenu ] = useState([]);\r\n    const [ children, setChildren ] = useState([]);\r\n    const [ target, setTarget ] = useState(null);\r\n\r\n    const login = useSelector(state => state.UserReducer);\r\n    const dispatch = useDispatch();\r\n\r\n    async function fetchData(){\r\n        const result = await MainAPIRoute.fetchMainAPI();\r\n        const data = result.data;\r\n        console.log(data);\r\n\r\n        setMenu(data.menu);\r\n    }\r\n\r\n    useEffect(async () => {\r\n        if(login.isLogin){\r\n            fetchData();\r\n        } else {\r\n            fetchData();\r\n        }\r\n        console.log(login);\r\n        \r\n    }, [login.isLogin]);\r\n\r\n    const handleMenuOpen = (event) => {\r\n        setTarget(event.currentTarget);\r\n        const menuId = event.currentTarget.getAttribute('data');\r\n\r\n        MenuAPIRoute.fetchFindMenuItemByUpperId(menuId)\r\n                    .then ( res => {\r\n                        const data = res.data;\r\n                        setChildren(data);\r\n                    });\r\n    };\r\n    \r\n    const handleMenuClose = () => {\r\n        setTarget(null);\r\n    };\r\n\r\n    const handleLogout = (event) => {\r\n        UserAPIRoute.fetchUserLogout()\r\n                    .then(res => {\r\n                        const data = res.data;\r\n\r\n                        if(data.isLogout){\r\n                            if(window.confirm(data.message)){\r\n                                dispatch(\r\n                                    RootActions.UserReducerAction.logout(\r\n                                        {\r\n                                              isRegist: false\r\n                                            , isLogin: false\r\n                                            , login: {}\r\n                                            , menu: []\r\n                                        }\r\n                                    )\r\n                                );\r\n\r\n                                fetchData();\r\n                            }\r\n                        } else {\r\n                            alert(data.message);\r\n                        }\r\n                    });\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <AppBar position=\"static\" color=\"transparent\">\r\n                <Container maxWidth=\"xl\">\r\n                    <List component=\"nav\" aria-labelledby=\"main navigation\">\r\n                        <div className=\"leftMenu\">\r\n                            <div className=\"menuList\">\r\n                                <Link to=\"/\" className=\"textLink\">\r\n                                    <IconButton size=\"small\">\r\n                                        <Typography className=\"main\" variant=\"button\">\r\n                                            inssumnia\r\n                                        </Typography>\r\n                                    </IconButton>\r\n                                </Link>\r\n                            </div>\r\n                            {\r\n                                menu.map((item, index) => (\r\n                                    <div className=\"menuList\">\r\n                                        <IconButton size=\"small\" data={item.menuId} onClick={handleMenuOpen}>\r\n                                            <Typography className=\"menuIcon\">\r\n                                                {item.menuNm}          \r\n                                            </Typography>\r\n                                        </IconButton>\r\n                                        {\r\n                                            children.length != 0 ?\r\n                                            (\r\n                                                <Menu\r\n                                                    anchorEl={target}\r\n                                                    keepMounted\r\n                                                    open={Boolean(target)}\r\n                                                    onClose={handleMenuClose}\r\n                                                >\r\n                                                    {\r\n                                                        children.map((item, index) => (\r\n                                                            <MenuItem onClick={handleMenuClose}>\r\n                                                                <Link to={item.menuUrl}>\r\n                                                                    <IconButton size=\"small\">\r\n                                                                        <Typography className=\"menuIcon\">\r\n                                                                            {item.menuNm}          \r\n                                                                        </Typography>\r\n                                                                    </IconButton>\r\n                                                                </Link>\r\n                                                            </MenuItem>\r\n                                                        ))\r\n                                                    }\r\n                                                </Menu>\r\n                                            ):(\r\n                                                null\r\n                                            )\r\n                                        }\r\n                                        \r\n                                    </div>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                        {login.isLogin ? (\r\n                            <div className=\"rightMenu\">\r\n                                <div className=\"menuList\">\r\n                                    <Link to='/myInfo' className=\"textLink\">\r\n                                        <Tooltip title={login.loginUser.userNm}>\r\n                                            <IconButton size=\"small\">\r\n                                                <AssignmentIndIcon className=\"userIcon\" fontSize=\"small\" />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                    </Link>\r\n                                </div>\r\n                                <div className=\"menuList\">\r\n                                    <IconButton size=\"small\">\r\n                                        <Tooltip title=\"로그아웃\">\r\n                                            <LockRoundedIcon className=\"userIcon\" fontSize=\"small\" onClick={handleLogout}/>\r\n                                        </Tooltip>\r\n                                    </IconButton>\r\n                                </div>\r\n                            </div>\r\n                        ):(\r\n                            <div className=\"rightMenu\">\r\n                                <div className=\"menuList\">\r\n                                    <Tooltip title=\"로그인\">\r\n                                    <IconButton size=\"small\">\r\n                                        <Link to=\"/login\" className=\"textLink\">\r\n                                            <LockOpenRoundedIcon className=\"userIcon\" fontSize=\"small\"/>\r\n                                        </Link>\r\n                                    </IconButton>\r\n                                    </Tooltip>\r\n                                </div>\r\n                                <div className=\"menuList\">\r\n                                    <Tooltip title=\"회원가입\">\r\n                                        <IconButton size=\"small\">\r\n                                            <Link to=\"/regist\" className=\"textLink\">\r\n                                                <PersonAddRoundedIcon className=\"userIcon\" fontSize=\"small\"/>\r\n                                            </Link>\r\n                                        </IconButton>\r\n                                    </Tooltip>\r\n                                </div>\r\n                            </div>  \r\n                        )}\r\n                    </List>\r\n                </Container>\r\n            </AppBar>\r\n            <div className=\"background\">\r\n            </div>\r\n        </div>\r\n    );   \r\n\r\n}","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\main\\UserLoginViewPage.jsx",[],"C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\user\\UserRegistViewPage.jsx",[],"C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\user\\UserInfoViewPage.jsx",["127"],"import { React, useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport UserAPIRoute from '../../router/libs/UserAPIRoute';\r\n\r\nimport { Button, Container, TextField } from '@material-ui/core';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nimport BackspaceRoundedIcon from '@material-ui/icons/BackspaceRounded';\r\nimport UpdateRoundedIcon from '@material-ui/icons/UpdateRounded';\r\nimport DeleteForeverRoundedIcon from '@material-ui/icons/DeleteForeverRounded';\r\nimport CancelRoundedIcon from '@material-ui/icons/CancelRounded';\r\nimport CheckCircleRoundedIcon from '@material-ui/icons/CheckCircleRounded';\r\n\r\nimport '../../css/common/common.css';\r\n\r\nexport default function UserInfoViewPage(props) {\r\n\r\n    const { userId } = props.match.params;\r\n    const [ user, setUser ] = useState({});\r\n\r\n    const [ isUpdate, setIsUpdate ] = useState(false);\r\n\r\n    async function fetchData(){\r\n        const result = await UserAPIRoute.fetchUserInfo(userId);\r\n        const data = result.data;\r\n\r\n        setUser(data);\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    },[]);\r\n\r\n    const handleIsUpdate = (event) =>\r\n    {\r\n        if(isUpdate){\r\n            setIsUpdate(false);\r\n        } else {\r\n            setIsUpdate(true);\r\n        }\r\n        \r\n        event.preventDefault();\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n\r\n        const target = event.target;\r\n        const value  = target.value;\r\n        const name   = target.name;\r\n\r\n        setUser(\r\n            {   \r\n                ...user\r\n              , [name]: value\r\n            }\r\n        );\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        const params = user;\r\n\r\n        UserAPIRoute.fetchUpdateUsers(params)\r\n                    .then( res => {\r\n                        const data = res.data;\r\n\r\n                        if(data.update){\r\n                            if(window.confirm(data.message)){\r\n                                setIsUpdate(false);\r\n                                fetchData();\r\n                            }\r\n                        } else {\r\n                            alert(data.message);\r\n                        }\r\n                    });\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    if(isUpdate) {\r\n        return(\r\n            <Container className=\"container\" component=\"main\" maxWidth=\"lg\" color=\"inherit\">\r\n    \r\n                <div className=\"btnRightField\">\r\n                    <Link to=\"/admin/user/list\" className=\"textLink\">\r\n                        <Button className=\"btnRight\" variant=\"contained\" color=\"inherit\" size=\"small\" startIcon={<BackspaceRoundedIcon />}>목록</Button>\r\n                    </Link>\r\n                    <Button className=\"btnRight\" variant=\"contained\" color=\"secondary\" size=\"small\" onClick={handleIsUpdate} startIcon={<CancelRoundedIcon />}>취소</Button>\r\n                    <Button className=\"btnRight\" variant=\"contained\" color=\"secondary\" size=\"small\" startIcon={<DeleteForeverRoundedIcon />}>삭제</Button>\r\n                </div>\r\n                <form onSubmit={handleSubmit} method=\"post\">\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={12}>\r\n                            <TableContainer>\r\n                                <Table id=\"table\" size=\"small\">\r\n                                    <TableHead className=\"tableHeader\">\r\n                                        <TableCell>아이디</TableCell>\r\n                                        <TableCell>{user.userId}</TableCell>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        <TableRow>\r\n                                            <TableCell>이름</TableCell>\r\n                                            <TableCell><TextField id=\"userNm\" name=\"userNm\" value={user.userNm} onChange={handleChange} size=\"small\"></TextField></TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell>비밀번호</TableCell>\r\n                                            <TableCell><TextField type=\"password\" id=\"password\" name=\"password\" value={user.password} onChange={handleChange} size=\"small\" required></TextField></TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell>별명</TableCell>\r\n                                            <TableCell><TextField id=\"nickNm\" name=\"nickNm\" value={user.nickNm} onChange={handleChange} size=\"small\"></TextField></TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell>권한</TableCell>\r\n                                            <TableCell>{user.roleNm}</TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell>등록일시</TableCell>\r\n                                            <TableCell>{user.recentLoginDatetime}</TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell>접속일시</TableCell>\r\n                                            <TableCell>{user.createDatetime}</TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell>수정자</TableCell>\r\n                                            <TableCell>{user.updateUserId}</TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell>수정일시</TableCell>\r\n                                            <TableCell>{user.updateDatetime}</TableCell>\r\n                                        </TableRow>\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                        </Grid>\r\n                    </Grid>\r\n                \r\n                    <div className=\"btnRightField\">\r\n                        <Button  type=\"submit\" className=\"btnRight\" variant=\"contained\" color=\"primary\" size=\"small\" startIcon={<CheckCircleRoundedIcon />}>수정</Button>\r\n                    </div>\r\n                </form>\r\n            </Container>\r\n        );\r\n    } else {\r\n        return(\r\n            <Container className=\"container\" component=\"main\" maxWidth=\"lg\" color=\"inherit\">\r\n    \r\n                <div className=\"btnRightField\">\r\n                    <Link to=\"/admin/user/list\" className=\"textLink\">\r\n                        <Button className=\"btnRight\" variant=\"contained\" color=\"inherit\" size=\"small\" startIcon={<BackspaceRoundedIcon />}>목록</Button>\r\n                    </Link>\r\n                    <Button className=\"btnRight\" variant=\"contained\" color=\"primary\" size=\"small\" onClick={handleIsUpdate} startIcon={<UpdateRoundedIcon />}>수정</Button>\r\n                    <Button className=\"btnRight\" variant=\"contained\" color=\"secondary\" size=\"small\" startIcon={<DeleteForeverRoundedIcon />}>삭제</Button>\r\n                </div>\r\n                \r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12}>\r\n                        <TableContainer>\r\n                            <Table id=\"table\" size=\"small\">\r\n                                <TableHead className=\"tableHeader\">\r\n                                    <TableCell>아이디</TableCell>\r\n                                    <TableCell>{user.userId}</TableCell>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    <TableRow>\r\n                                        <TableCell>이름</TableCell>\r\n                                        <TableCell>{user.userNm}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell>별명</TableCell>\r\n                                        <TableCell>{user.nickNm}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell>권한</TableCell>\r\n                                        <TableCell>{user.roleNm}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell>등록일시</TableCell>\r\n                                        <TableCell>{user.createDatetime}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell>접속일시</TableCell>\r\n                                        <TableCell>{user.recentLoginDatetime}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell>수정자</TableCell>\r\n                                        <TableCell>{user.updateUserId}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell>수정일시</TableCell>\r\n                                        <TableCell>{user.updateDatetime}</TableCell>\r\n                                    </TableRow>\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n}","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\user\\UserListViewPage.jsx",[],"C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\error\\NotFoundErrorPage.jsx",["128"],"import {Button, Container, Divider} from '@material-ui/core';\r\nimport PanToolRoundedIcon from '@material-ui/icons/PanToolRounded';\r\n\r\nexport default function NotFoundErrorPage() {\r\n    return (\r\n        <Container className=\"bodyContainer\" component=\"main\" maxWidth=\"xs\">\r\n            <PanToolRoundedIcon/>\r\n            <Divider/>\r\n            <p>NOT FOUND!!</p>\r\n        </Container>\r\n    )\r\n}","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\error\\AccessErrorPage.jsx",[],"C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\error\\AuthoriziedErrorPage.jsx",["129"],"import {Link} from 'react-router-dom';\r\nimport {Button, Container, Divider} from '@material-ui/core';\r\nimport PanToolRoundedIcon from '@material-ui/icons/PanToolRounded';\r\nimport PersonRoundedIcon from '@material-ui/icons/PersonRounded';\r\n\r\nexport default function AuthoriziedErrorPage() {\r\n    return (\r\n        <Container className=\"bodyContainer\" component=\"main\" maxWidth=\"xs\">\r\n            <PanToolRoundedIcon/>\r\n            <Divider/>\r\n            <p>PLEASE LOGIN .... </p>\r\n            <div className=\"buttonField\">\r\n                <Link to=\"/login\" className=\"textLink\">\r\n                    <Button type=\"button\" className=\"btnVertical\" variant=\"contained\" color=\"primary\" className=\"regist\" margin=\"normal\" startIcon={<PersonRoundedIcon fontSize=\"small\"/>} fullWidth>\r\n                        로그인\r\n                    </Button>\r\n                </Link>\r\n            </div>\r\n        </Container>\r\n    )\r\n}","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\libs\\reducer\\RootActions.js",[],"C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\router\\libs\\UserAPIRoute.js",[],"C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\libs\\reducer\\user\\action\\UserReducerAction.js",["130"],"const regist = () => {\r\n    return {\r\n        type: 'USER_REGIST'\r\n    };\r\n};\r\n\r\nconst login = data => {\r\n    return {\r\n          type: 'USER_LOGIN'\r\n        , data\r\n    };\r\n};\r\n\r\nconst logout = () => {\r\n    return {\r\n        type: 'USER_LOGOUT'\r\n    }\r\n}\r\n\r\nexport default { \r\n        regist\r\n    ,   login\r\n    ,   logout\r\n};","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\admin\\MenuMgmtViewPage.jsx",["131","132","133","134"],"import { React, useEffect, useState } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport MenuAPIRoute from '../../router/libs/MenuAPIRoute';\r\n\r\nimport { Button, Checkbox, Container, Divider, FormControl, FormControlLabel, FormLabel, Grid, IconButton, InputAdornment, Paper, Switch, Table, TableCell, TableRow, TextField, Tooltip, Typography } from '@material-ui/core';\r\nimport TreeView from '@material-ui/lab/TreeView';\r\nimport TreeItem from '@material-ui/lab/TreeItem';\r\n\r\nimport UpdateRoundedIcon from '@material-ui/icons/UpdateRounded';\r\nimport ArrowDropDownRoundedIcon from '@material-ui/icons/ArrowDropDownRounded';\r\nimport ArrowRightRoundedIcon from '@material-ui/icons/ArrowRightRounded';\r\nimport InfoRoundedIcon from '@material-ui/icons/InfoRounded';\r\nimport AddCircleRoundedIcon from '@material-ui/icons/AddCircleRounded';\r\nimport HighlightOffRoundedIcon from '@material-ui/icons/HighlightOffRounded';\r\n\r\nimport '../../css/common/common.css';\r\n\r\nexport default function MenuMgmtViewPage() {\r\n\r\n    const login = useSelector(state => state.UserReducer);\r\n\r\n    const [ menu, setMenu ] = useState([]);\r\n    const [ info, setInfo ] = useState({});\r\n    const [ itemId, setItemId] = useState('');\r\n    const [ isAdmin, setIsAdmin ] = useState(false);\r\n\r\n    async function fetchData(){\r\n        const result = await MenuAPIRoute.fetchFindMenuItemByTree();\r\n        const data = result.data;\r\n\r\n        setMenu(data);\r\n        setInfo({});\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, []);\r\n\r\n    const renderTree = (node) => (\r\n        <TreeItem nodeId={node.id} key={node.id} label={node.label}>\r\n            {Array.isArray(node.children) ?\r\n                node.children.map((item) => renderTree(item))\r\n                : null\r\n            }\r\n        </TreeItem>\r\n    );\r\n\r\n    // TreeItem 클릭 이벤트 함수\r\n    const handleNodeClick = (event, node) => {\r\n        // 메뉴 추가시 현재 선택된 메뉴의 아이디를 저장\r\n        setItemId(node);\r\n\r\n        // 현재 선택된 메뉴 아이디\r\n        const menuId = node;\r\n        if(menuId != 'newId'){ // 메뉴 아이디가 추가할 메뉴 아이디가 아닐 경우\r\n            // 현재 선택된 메뉴에 해당하는 정보를 DB에서 읽어옴\r\n            MenuAPIRoute.fetchFindMenuItemByMenuId(menuId)\r\n                    .then( res => {\r\n                        const data = res.data;\r\n\r\n                        // 현재 선택된 메뉴가 관리자용 메뉴 여부 판단하여\r\n                        //관리자 여부 플래그에 값을 반환\r\n                        if(data.isAdmin){\r\n                            setIsAdmin(true);\r\n                        } else {\r\n                            setIsAdmin(false);\r\n                        }\r\n\r\n                        setInfo(data);\r\n                    });\r\n        } else { // 메뉴 아이디가 추가할 메뉴 아이디일 경우\r\n            // 추가할 메뉴 정보를 반환\r\n            setInfo({\r\n                    menuId: node\r\n                ,   menuUpperId: itemId\r\n                ,   menuNmKr: ''\r\n                ,   menuNmEn: ''\r\n                ,   menuUrl: ''\r\n                ,   menuDepth: ''\r\n                ,   menuOrder: ''\r\n                ,   createUserId: login.loginUser.userId\r\n                ,   updateUserId: login.loginUser.userId\r\n                ,   isAdmin: false\r\n                ,   isAddition: true\r\n                ,   isDeleted: false\r\n            });\r\n            \r\n            setItemId('');\r\n        }\r\n        \r\n    }\r\n\r\n    // handleNodeAddClick 함수의 부가 함수\r\n    // 메뉴의 아이디가 최상위 부모 메뉴 아이디가 아닐 경우\r\n    // 해당 아이디의 메뉴를 찾아줌.\r\n    const findMenuId = (node) => {\r\n\r\n        const child = {\r\n                id: \"newId\"\r\n            ,   upperId : itemId\r\n            ,   label : \"Label\"\r\n            ,   children : []\r\n        };\r\n \r\n        if(Array.isArray(node)){\r\n            node.forEach(function(item, index){\r\n                if(item.id ===itemId){ // 해당 메뉴 아이디와 찾는 부모 메뉴와 일치할 경우\r\n                    // 해당 메뉴에 자식 메뉴를 추가\r\n                    item.children.push(child);\r\n                    return false;\r\n                } else { // 해당 메뉴 아이디와 찾는 부모 메뉴와 일치하지 않은 경우\r\n                    // 다시 함수를 호출하여 해당 메뉴를 찾음\r\n                    findMenuId(item.children);\r\n                }\r\n            });\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    // 메뉴 추가 버튼 클릭 이벤트 함수\r\n    const handleNodeAddClick = () => {\r\n        const children = [];\r\n        const child = {\r\n                id: \"newId\"\r\n            ,   upperId : itemId\r\n            ,   label : \"Label\"\r\n            ,   children : []\r\n        };\r\n\r\n        // 메뉴의 아이디가 최상위 부모 메뉴 아이디일 경우\r\n        if(itemId === menu.id) {\r\n\r\n            menu.children.map((item) => (\r\n                children.push(item)\r\n            ));\r\n\r\n            // 최상위 부모 메뉴의 자식 메뉴 리스트에 추가\r\n            children.push(child);\r\n\r\n            setMenu({\r\n                ...menu,\r\n                children: children\r\n            });\r\n\r\n        } \r\n        else if(itemId === ''){\r\n            alert(\"메뉴를 추가하기 전, 메뉴를 선택해주세요!\");\r\n        } else { // 메뉴의 아이디가 최상위 부모 메뉴 아이디가 아닐 경우\r\n            const children = findMenuId(menu.children);\r\n\r\n            setMenu({\r\n                ...menu\r\n                , children: children\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    // 메뉴 삭제 버튼 클릭 이벤트 함수\r\n    const handleNodeDelClick = () => {\r\n        console.log(itemId);\r\n        const params = {};\r\n\r\n        if(itemId === menu.id) {\r\n            alert(\"최상위 메뉴는 삭제할 수 없습니다!\");\r\n        } else if(itemId === ''){\r\n            alert(\"삭제 할 메뉴를 선택해주세요!\");\r\n        } \r\n        else { \r\n\r\n            params.menuId = itemId;\r\n            params.updateUserId = login.loginUser.userId;\r\n\r\n            MenuAPIRoute.fetchDeleteMenuItem(params)\r\n                        .then( res => {\r\n                            const data = res.data;\r\n\r\n                            // 삭제 성공 여부\r\n                            if(data.success){\r\n                                // 삭제 성공시 페이지 재호출\r\n                                if(window.confirm(data.message)){\r\n                                    setInfo({});\r\n                                    fetchData();\r\n                                }\r\n                            } else { // 삭제 실패시 메시지 호출\r\n                                alert(data.message);\r\n                            }\r\n                        });\r\n        }\r\n    }\r\n\r\n    const handleInfoChange = (event) => {\r\n        const target = event.target;\r\n        const value  = target.value;\r\n        const name   = target.name;\r\n\r\n        setInfo(\r\n            {\r\n                  ...info\r\n                , [name]: value\r\n            }\r\n        );\r\n    }\r\n\r\n    const handleInfoCheckChange = (event) => {\r\n        const target = event.target;\r\n        const value  = target.checked;\r\n        const name   = target.name;\r\n\r\n        setIsAdmin(value);\r\n        setInfo(\r\n            {\r\n                  ...info\r\n                , [name]: value\r\n            }\r\n        );\r\n    }\r\n\r\n    // 메뉴 수정 및 추가 이벤트\r\n    const handleInfoSubmit = (event) => {\r\n        const params = info;\r\n\r\n        MenuAPIRoute.fetchUpdateMenuItem(params)\r\n                    .then( res => {\r\n                        const data = res.data;\r\n\r\n                        // 수정 및 추가 성공 여부\r\n                        if(data.success){\r\n                            // 수정 및 추가 성공시 페이지 재호출\r\n                            if(window.confirm(data.message)){\r\n                                fetchData();\r\n                            }\r\n                        } else { // 수정 및 추가 실패시 메시지 호출\r\n                            alert(data.message);\r\n                        }\r\n                    });\r\n\r\n        event.preventDefault();\r\n    }\r\n    \r\n    if(login.isLogin){\r\n        return (\r\n            <Container className=\"container\" component=\"main\" maxWidth=\"lg\" color=\"inherit\">\r\n                <Grid container className=\"gridContainer\" spacing={2}>\r\n                    <Grid item xs={3} className=\"menuTree\" >\r\n                        <Typography>\r\n                            Menu List\r\n                        </Typography>\r\n                        <Divider variant=\"fullWidth\"/> \r\n                        <div className=\"rightMenu\">\r\n                            <Tooltip title=\"추가\">\r\n                                <IconButton className=\"btnRight\" size=\"small\">\r\n                                    <AddCircleRoundedIcon className=\"userIcon\" fontSize=\"small\" onClick={handleNodeAddClick} />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip title=\"삭제\">\r\n                                <IconButton className=\"btnRight\" size=\"small\">\r\n                                    <HighlightOffRoundedIcon className=\"userIcon\" fontSize=\"small\" onClick={handleNodeDelClick} />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </div>\r\n                        <TreeView className=\"tree\" \r\n                                defaultCollapseIcon={<ArrowDropDownRoundedIcon />}\r\n                                defaultExpandIcon={<ArrowRightRoundedIcon />}\r\n                                onNodeSelect={handleNodeClick}>\r\n                            {renderTree(menu)}\r\n                        </TreeView>\r\n                    </Grid>\r\n                    <Divider orientation=\"vertical\" flexItem/>\r\n                    <Grid item xs={8} className=\"menuInfo\">\r\n                        <form onSubmit={handleInfoSubmit} method=\"post\">\r\n                            <Typography>\r\n                                Menu Info\r\n                            </Typography>\r\n                            <Divider className=\"divider\"/>\r\n                            <Table size=\"small\">\r\n                                {info.isAddition ? (\r\n                                        <TableRow>\r\n                                            <TableCell colSpan={6}>\r\n                                                <TextField \r\n                                                    className=\"textField\"\r\n                                                    id=\"menuId\"\r\n                                                    name=\"menuId\"\r\n                                                    label=\"Id\"\r\n                                                    value={info.menuId} \r\n                                                    onChange={handleInfoChange} \r\n                                                    variant=\"outlined\" \r\n                                                    size=\"small\" \r\n                                                    fullWidth\r\n                                                    InputProps={\r\n                                                        {\r\n                                                            startAdornment: (\r\n                                                                <InputAdornment position=\"start\">\r\n                                                                    <InfoRoundedIcon fontSize=\"small\"/>\r\n                                                                </InputAdornment>\r\n                                                            )\r\n                                                        }\r\n                                                    }\r\n                                                    InputLabelProps={{ shrink: true }}>\r\n                                                </TextField>\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    ) : (\r\n                                        null\r\n                                    )\r\n                                }\r\n                                <TableRow>\r\n                                    <TableCell colSpan={3}>\r\n                                        <TextField \r\n                                            className=\"textField\"\r\n                                            id=\"menuNmKr\"\r\n                                            name=\"menuNmKr\"\r\n                                            label=\"Name (Korean)\"\r\n                                            value={info.menuNmKr} \r\n                                            onChange={handleInfoChange} \r\n                                            variant=\"outlined\" \r\n                                            size=\"small\" \r\n                                            fullWidth\r\n                                            InputProps={\r\n                                                {\r\n                                                    startAdornment: (\r\n                                                        <InputAdornment position=\"start\">\r\n                                                            <InfoRoundedIcon fontSize=\"small\"/>\r\n                                                        </InputAdornment>\r\n                                                    )\r\n                                                }\r\n                                            }\r\n                                            InputLabelProps={{ shrink: true }}>\r\n                                        </TextField>\r\n                                    </TableCell>\r\n                                    <TableCell colSpan={3}>\r\n                                        <TextField\r\n                                            className=\"textField\" \r\n                                            id=\"menuNmEn\"\r\n                                            name=\"menuNmEn\" \r\n                                            label=\"Name (English)\" \r\n                                            value={info.menuNmEn} \r\n                                            onChange={handleInfoChange} \r\n                                            variant=\"outlined\" \r\n                                            size=\"small\" \r\n                                            fullWidth\r\n                                            InputProps={\r\n                                                {\r\n                                                    startAdornment: (\r\n                                                        <InputAdornment position=\"start\">\r\n                                                            <InfoRoundedIcon fontSize=\"small\"/>\r\n                                                        </InputAdornment>\r\n                                                    )\r\n                                                }\r\n                                            }\r\n                                            InputLabelProps={{ shrink: true }}>\r\n                                        </TextField>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell colSpan={3}>\r\n                                        <TextField\r\n                                            className=\"textField\" \r\n                                            id=\"menuUrl\" \r\n                                            name=\"menuUrl\" \r\n                                            label=\"Url\" \r\n                                            value={info.menuUrl} \r\n                                            onChange={handleInfoChange}\r\n                                            variant=\"outlined\" \r\n                                            size=\"small\"\r\n                                            fullWidth\r\n                                            InputProps={\r\n                                                {\r\n                                                    startAdornment: (\r\n                                                        <InputAdornment position=\"start\">\r\n                                                            <InfoRoundedIcon fontSize=\"small\"/>\r\n                                                        </InputAdornment>\r\n                                                    )\r\n                                                }\r\n                                            }\r\n                                            InputLabelProps={{ shrink: true }}>\r\n                                        </TextField>\r\n                                    </TableCell>\r\n                                    <TableCell colSpan={3}>\r\n                                        <TextField\r\n                                            className=\"textField\" \r\n                                            id=\"menuIcon\" \r\n                                            name=\"menuIcon\" \r\n                                            label=\"Icon\" \r\n                                            value={info.menuIcon} \r\n                                            onChange={handleInfoChange}\r\n                                            variant=\"outlined\" \r\n                                            size=\"small\"\r\n                                            fullWidth\r\n                                            InputProps={\r\n                                                {\r\n                                                    startAdornment: (\r\n                                                        <InputAdornment position=\"start\">\r\n                                                            <InfoRoundedIcon fontSize=\"small\"/>\r\n                                                        </InputAdornment>\r\n                                                    )\r\n                                                }\r\n                                            }\r\n                                            InputLabelProps={{ shrink: true }}>\r\n                                        </TextField>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell colSpan={3}>\r\n                                        <TextField \r\n                                            className=\"textField\"\r\n                                            id=\"menuDepth\" \r\n                                            name=\"menuDepth\" \r\n                                            label=\"Level\" \r\n                                            value={info.menuDepth} \r\n                                            onChange={handleInfoChange} \r\n                                            variant=\"outlined\"\r\n                                            size=\"small\" \r\n                                            fullWidth\r\n                                            disabled\r\n                                            InputProps={\r\n                                                {\r\n                                                    startAdornment: (\r\n                                                        <InputAdornment position=\"start\">\r\n                                                            <InfoRoundedIcon fontSize=\"small\"/>\r\n                                                        </InputAdornment>\r\n                                                    )\r\n                                                }\r\n                                            }\r\n                                            InputLabelProps={{ shrink: true }}>\r\n                                        </TextField>\r\n                                    </TableCell>\r\n                                    <TableCell colSpan={3}>\r\n                                        <TextField \r\n                                            className=\"textField\"\r\n                                            id=\"menuOrd\" \r\n                                            name=\"menuOrd\" \r\n                                            label=\"Order\" \r\n                                            value={info.menuOrd} \r\n                                            onChange={handleInfoChange} \r\n                                            variant=\"outlined\"\r\n                                            size=\"small\" \r\n                                            fullWidth\r\n                                            disabled\r\n                                            InputProps={\r\n                                                {\r\n                                                    startAdornment: (\r\n                                                        <InputAdornment position=\"start\">\r\n                                                            <InfoRoundedIcon fontSize=\"small\"/>\r\n                                                        </InputAdornment>\r\n                                                    )\r\n                                                }\r\n                                            }\r\n                                            InputLabelProps={{ shrink: true }}>\r\n                                        </TextField>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell colSpan={6}>\r\n                                        <FormControl>\r\n                                            <FormControlLabel\r\n                                                className=\"formLabel\" \r\n                                                label=\"Is Admin?\"\r\n                                                control={\r\n                                                    <Checkbox \r\n                                                        id=\"isAdmin\"\r\n                                                        name=\"isAdmin\"\r\n                                                        checked={isAdmin}\r\n                                                        onChange={handleInfoCheckChange}\r\n                                                        size=\"small\"\r\n                                                        color=\"default\"\r\n                                                    />\r\n                                                }/>\r\n                                        </FormControl>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </Table>\r\n                            <div className=\"btnRightField\">\r\n                                <Button className=\"btnRight\" \r\n                                    type=\"submit\" \r\n                                    variant=\"contained\" \r\n                                    color=\"primary\" \r\n                                    size=\"small\" \r\n                                    startIcon={<UpdateRoundedIcon />}>\r\n                                저장</Button>\r\n                            </div>\r\n                        </form>\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n    \r\n        );\r\n    } else {\r\n        return (\r\n            <Redirect to=\"/error/auth\" />\r\n        );\r\n    }\r\n    \r\n}","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\router\\libs\\MainAPIRoute.js",[],"C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\libs\\reducer\\menu\\action\\MenuReducerAction.js",["135"],"const menu = data => {\r\n    return {\r\n        type: 'MENU'\r\n        , data\r\n    };\r\n};\r\n\r\nexport default { \r\n    menu\r\n};","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\libs\\reducer\\menu\\reducer\\MenuReducer.js",[],"C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\user\\MyInfoViewPage.jsx",["136","137"],"import { React, useState, useEffect } from 'react';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport UserAPIRoute from '../../router/libs/UserAPIRoute';\r\n\r\nimport { Button, Container, TextField } from '@material-ui/core';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nimport UpdateRoundedIcon from '@material-ui/icons/UpdateRounded';\r\nimport CancelRoundedIcon from '@material-ui/icons/CancelRounded';\r\nimport CheckCircleRoundedIcon from '@material-ui/icons/CheckCircleRounded';\r\n\r\nimport '../../css/common/common.css';\r\n\r\nexport default function MyInfoViewPage(props) {\r\n\r\n    const login = useSelector(state => state.UserReducer);\r\n\r\n    const [ user, setUser ] = useState({});\r\n    const [ isUpdate, setIsUpdate ] = useState(false);\r\n\r\n    async function fetchData(){\r\n        const result = await UserAPIRoute.fetchUserInfo(login.loginUser.userId);\r\n        const data = result.data;\r\n\r\n        setUser(data);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if(login.loginUser != null){\r\n            fetchData();\r\n        }  \r\n    },[]);\r\n\r\n\r\n    const handleIsUpdate = (event) =>\r\n    {\r\n        if(isUpdate){\r\n            setIsUpdate(false);\r\n        } else {\r\n            setIsUpdate(true);\r\n        }\r\n        \r\n        event.preventDefault();\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n\r\n        const target = event.target;\r\n        const value  = target.value;\r\n        const name   = target.name;\r\n\r\n        setUser(\r\n            {   \r\n                ...user\r\n              , [name]: value\r\n            }\r\n        );\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        const params = user;\r\n        console.log(\"submit==>\", params);\r\n\r\n        UserAPIRoute.fetchUpdateUsers(params)\r\n                    .then( res => {\r\n                        const data = res.data;\r\n\r\n                        if(data.update){\r\n                            if(window.confirm(data.message)){\r\n                                setIsUpdate(false);\r\n                                fetchData();\r\n                            }\r\n                        } else {\r\n                            alert(data.message);\r\n                        }\r\n                    });\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    if(login.isLogin) { \r\n        if(isUpdate) {\r\n            return(\r\n                <Container className=\"container\" component=\"main\" maxWidth=\"lg\" color=\"inherit\">\r\n        \r\n                    <div className=\"btnRightField\">\r\n                    <Button  type=\"submit\" className=\"btnRight\" variant=\"contained\" color=\"primary\" size=\"small\" startIcon={<CheckCircleRoundedIcon />}>수정</Button>\r\n                        <Button className=\"btnRight\" variant=\"contained\" color=\"secondary\" size=\"small\" onClick={handleIsUpdate} startIcon={<CancelRoundedIcon />}>취소</Button>\r\n                    </div>\r\n                    <form onSubmit={handleSubmit} method=\"post\">\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={12}>\r\n                                <TableContainer>\r\n                                    <Table id=\"table\" size=\"small\">\r\n                                        <TableHead className=\"tableHeader\">\r\n                                            <TableCell>아이디</TableCell>\r\n                                            <TableCell>{login.loginUser.userId}</TableCell>\r\n                                        </TableHead>\r\n                                        <TableBody>\r\n                                            <TableRow>\r\n                                                <TableCell>이름</TableCell>\r\n                                                <TableCell><TextField id=\"userNm\" name=\"userNm\" value={login.loginUser.userNm} onChange={handleChange} size=\"small\"></TextField></TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell>비밀번호</TableCell>\r\n                                                <TableCell><TextField type=\"password\" id=\"password\" name=\"password\" value={login.loginUser.password} onChange={handleChange} size=\"small\" required></TextField></TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell>별명</TableCell>\r\n                                                <TableCell><TextField id=\"nickNm\" name=\"nickNm\" value={login.loginUser.nickNm} onChange={handleChange} size=\"small\"></TextField></TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell>권한</TableCell>\r\n                                                <TableCell>{login.loginUser.roleNm}</TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell>등록일시</TableCell>\r\n                                                <TableCell>{login.loginUser.recentLoginDatetime}</TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell>접속일시</TableCell>\r\n                                                <TableCell>{login.loginUser.createDatetime}</TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell>수정자</TableCell>\r\n                                                <TableCell>{login.loginUser.updateUserId}</TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell>수정일시</TableCell>\r\n                                                <TableCell>{login.loginUser.updateDatetime}</TableCell>\r\n                                            </TableRow>\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </TableContainer>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                </Container>\r\n            );\r\n        } else {\r\n            return(\r\n                <Container className=\"container\" component=\"main\" maxWidth=\"lg\" color=\"inherit\">\r\n        \r\n                    <div className=\"btnRightField\">\r\n                        <Button className=\"btnRight\" variant=\"contained\" color=\"primary\" size=\"small\" onClick={handleIsUpdate} startIcon={<UpdateRoundedIcon />}>수정</Button>\r\n                    </div>\r\n                    \r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={12}>\r\n                            <TableContainer>\r\n                                <Table id=\"table\" size=\"small\">\r\n                                    <TableHead className=\"tableHeader\">\r\n                                        <TableCell>아이디</TableCell>\r\n                                        <TableCell>{login.loginUser.userId}</TableCell>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        <TableRow>\r\n                                            <TableCell>이름</TableCell>\r\n                                            <TableCell>{login.loginUser.userNm}</TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell>별명</TableCell>\r\n                                            <TableCell>{login.loginUser.nickNm}</TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell>권한</TableCell>\r\n                                            <TableCell>{login.loginUser.roleNm}</TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell>등록일시</TableCell>\r\n                                            <TableCell>{login.loginUser.createDatetime}</TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell>접속일시</TableCell>\r\n                                            <TableCell>{login.loginUser.recentLoginDatetime}</TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell>수정자</TableCell>\r\n                                            <TableCell>{login.loginUser.updateUserId}</TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell>수정일시</TableCell>\r\n                                            <TableCell>{login.loginUser.updateDatetime}</TableCell>\r\n                                        </TableRow>\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Container>\r\n            );\r\n        }\r\n    } else {\r\n        return (\r\n            <Redirect to='/error/auth'/>\r\n        )\r\n    }\r\n    \r\n\r\n}","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\router\\libs\\MenuAPIRoute.js",[],"C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\router\\libs\\CommunityAPIRoute.js",[],"C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\common\\community\\CommunityWriteViewPage.jsx",["138","139"],"import { Button, ButtonGroup, Container, Grid, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, TextareaAutosize, TextField } from '@material-ui/core';\r\nimport { React, useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { Editor, EditorState, convertToRaw } from 'draft-js';\r\n\r\nimport CommunityAPIRoute from '../../../router/libs/CommunityAPIRoute';\r\n\r\nimport '../../../css/common/common.css';\r\n\r\n\r\nexport default function CommunityWriteViewPage(props) {\r\n\r\n    const login = useSelector(state => state.UserReducer);\r\n\r\n    const [ board, setBoard ] = useState({});\r\n    const [ boardId, setBoardId ] = useState(\"\");\r\n    const [ boardUrl, setBoardUrl ] = useState(\"\");\r\n\r\n    const [ editorState, setEditorState ] = useState(() => EditorState.createEmpty(),);\r\n    \r\n    async function fetchBoardByUrl(){\r\n        const path = props.match.path;\r\n        const url = path.split(\"/\");\r\n\r\n        const params = {};\r\n        params.boardUrl = url[2];\r\n\r\n        const result = await CommunityAPIRoute.fetchBoardByUrl(params);\r\n        const data = result.data;\r\n\r\n        setBoardId(data.boardId);\r\n        setBoardUrl(data.boardUrl);\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchBoardByUrl();\r\n    }, [boardId]);\r\n\r\n    const handleChange = ( event ) => {\r\n        var target = event.target;\r\n        var name = target.name;\r\n        var value = target.value;\r\n\r\n        setBoard({\r\n            ...board,\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    const handleSubmit = ( event ) => {\r\n        const params = board;\r\n        params.boardId = boardId;\r\n        params.boardContent = getContent();\r\n        params.createUserId = login.loginUser.userId;\r\n        console.log(params);\r\n\r\n        if(window.confirm(\"게시글 작성을 완료하시겠습니까?\")){\r\n            CommunityAPIRoute.fetchWriteBoard(params)\r\n                            .then( res => {\r\n                                const data = res.data;\r\n\r\n                                // 작성 성공 여부\r\n                                if(data.success){\r\n                                    // 성공시 페이지 이동\r\n                                    if(window.confirm(data.message)){\r\n                                        props.history.push(boardUrl);\r\n                                    }\r\n                                } else { \r\n                                    // 실패시 메시지 호출\r\n                                    alert(data.message);\r\n                                }\r\n                            });\r\n        }\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    const getContent = () => {\r\n        const blocks = convertToRaw(editorState.getCurrentContent()).blocks;\r\n        const value = blocks.map(block => (!block.text.trim() && '\\n') || block.text).join('\\n');\r\n        return value;\r\n    }\r\n\r\n    const goBacktoList = () => {\r\n        props.history.push(boardUrl);\r\n    }\r\n\r\n    return(\r\n        <Container className=\"container\" component=\"main\" maxWidth=\"lg\" color=\"inherit\">\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={12}>\r\n                    <form onSubmit={handleSubmit} method=\"post\">\r\n                        <TableContainer>\r\n                            <Table id=\"table\" size=\"medium\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell colSpan={12}>\r\n                                            <div className=\"btnRightField\">\r\n                                                <ButtonGroup size=\"small\" aria-label=\"small outlined button group\">\r\n                                                    <Button type=\"submit\">\r\n                                                        작성\r\n                                                    </Button>\r\n                                                    <Button type=\"button\" color=\"secondary\" onClick={goBacktoList}>\r\n                                                        취소\r\n                                                    </Button>\r\n                                                </ButtonGroup>\r\n                                            </div>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    <TableRow>\r\n                                        <TableCell colSpan={1}>제목</TableCell>\r\n                                        <TableCell colSpan={8}>\r\n                                            <TextField \r\n                                                id=\"boardTitle\"\r\n                                                name=\"boardTitle\"\r\n                                                onChange={handleChange} \r\n                                                size=\"small\" \r\n                                                fullWidth\r\n                                                InputLabelProps={{ shrink: true }}\r\n                                                autoFocus={true}\r\n                                                >\r\n                                            </TextField>\r\n                                        </TableCell>\r\n                                        <TableCell colSpan={1}>작성자</TableCell>\r\n                                        <TableCell colSpan={1}>\r\n                                            <TextField \r\n                                                id=\"createUserName\"\r\n                                                name=\"createUserName\"\r\n                                                value={`${login.loginUser.nickNm} (${login.loginUser.userId})`} \r\n                                                size=\"small\" \r\n                                                fullWidth\r\n                                                disabled\r\n                                            >\r\n                                            </TextField>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell colspan={1}>\r\n                                            내용\r\n                                        </TableCell>\r\n                                        <TableCell colSpan={11}>\r\n                                            <div className=\"editor\">\r\n                                                <Editor editorState={editorState} onChange={setEditorState} ariaLabel=\"내용을 입력하세요\"/>\r\n                                            </div>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </form>\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    );\r\n}","C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\common\\community\\CommunityListViewPage.jsx",["140","141","142","143"],"C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\views\\common\\community\\CommunityViewPage.jsx",["144","145","146"],"C:\\pjt\\bak\\insummnia\\src\\main\\webapp\\WEB-INF\\jsx\\src\\router\\libs\\ReplyAPIRoute.js",[],{"ruleId":"147","replacedBy":"148"},{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","severity":1,"message":"152","line":8,"column":11,"nodeType":"153","messageId":"154","endLine":8,"endColumn":16},{"ruleId":"155","severity":1,"message":"156","line":45,"column":15,"nodeType":"157","endLine":53,"endColumn":6},{"ruleId":"155","severity":1,"message":"158","line":53,"column":8,"nodeType":"159","endLine":53,"endColumn":23,"suggestions":"160"},{"ruleId":"161","severity":1,"message":"162","line":120,"column":61,"nodeType":"163","messageId":"164","endLine":120,"endColumn":63},{"ruleId":"155","severity":1,"message":"165","line":40,"column":7,"nodeType":"159","endLine":40,"endColumn":9,"suggestions":"166"},{"ruleId":"151","severity":1,"message":"167","line":1,"column":9,"nodeType":"153","messageId":"154","endLine":1,"endColumn":15},{"ruleId":"168","severity":1,"message":"169","line":14,"column":103,"nodeType":"170","endLine":14,"endColumn":121},{"ruleId":"171","severity":1,"message":"172","line":20,"column":1,"nodeType":"173","endLine":24,"endColumn":3},{"ruleId":"151","severity":1,"message":"174","line":7,"column":79,"nodeType":"153","messageId":"154","endLine":7,"endColumn":88},{"ruleId":"151","severity":1,"message":"175","line":7,"column":124,"nodeType":"153","messageId":"154","endLine":7,"endColumn":129},{"ruleId":"151","severity":1,"message":"176","line":7,"column":131,"nodeType":"153","messageId":"154","endLine":7,"endColumn":137},{"ruleId":"161","severity":1,"message":"162","line":57,"column":19,"nodeType":"163","messageId":"164","endLine":57,"endColumn":21},{"ruleId":"171","severity":1,"message":"172","line":8,"column":1,"nodeType":"173","endLine":10,"endColumn":3},{"ruleId":"151","severity":1,"message":"177","line":2,"column":10,"nodeType":"153","messageId":"154","endLine":2,"endColumn":14},{"ruleId":"155","severity":1,"message":"178","line":41,"column":7,"nodeType":"159","endLine":41,"endColumn":9,"suggestions":"179"},{"ruleId":"151","severity":1,"message":"180","line":1,"column":114,"nodeType":"153","messageId":"154","endLine":1,"endColumn":130},{"ruleId":"155","severity":1,"message":"181","line":38,"column":8,"nodeType":"159","endLine":38,"endColumn":17,"suggestions":"182"},{"ruleId":"151","severity":1,"message":"183","line":10,"column":18,"nodeType":"153","messageId":"154","endLine":10,"endColumn":29},{"ruleId":"151","severity":1,"message":"177","line":11,"column":10,"nodeType":"153","messageId":"154","endLine":11,"endColumn":14},{"ruleId":"151","severity":1,"message":"184","line":15,"column":8,"nodeType":"153","messageId":"154","endLine":15,"endColumn":14},{"ruleId":"155","severity":1,"message":"181","line":75,"column":8,"nodeType":"159","endLine":75,"endColumn":20,"suggestions":"185"},{"ruleId":"151","severity":1,"message":"186","line":7,"column":42,"nodeType":"153","messageId":"154","endLine":7,"endColumn":46},{"ruleId":"151","severity":1,"message":"187","line":9,"column":8,"nodeType":"153","messageId":"154","endLine":9,"endColumn":25},{"ruleId":"155","severity":1,"message":"181","line":60,"column":8,"nodeType":"159","endLine":60,"endColumn":10,"suggestions":"188"},"no-native-reassign",["189"],"no-negated-in-lhs",["190"],"no-unused-vars","'login' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'login'. Either include it or remove the dependency array.","ArrayExpression",["191"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["192"],"'Button' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'FormLabel' is defined but never used.","'Paper' is defined but never used.","'Switch' is defined but never used.","'Link' is defined but never used.","React Hook useEffect has missing dependencies: 'fetchData' and 'login.loginUser'. Either include them or remove the dependency array.",["193"],"'TextareaAutosize' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchBoardByUrl'. Either include it or remove the dependency array.",["194"],"'ButtonGroup' is defined but never used.","'Select' is defined but never used.",["195"],"'Grid' is defined but never used.","'CreateRoundedIcon' is defined but never used.",["196"],"no-global-assign","no-unsafe-negation",{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},"Update the dependencies array to be: [login, login.isLogin]",{"range":"209","text":"210"},"Update the dependencies array to be: [fetchData]",{"range":"211","text":"212"},"Update the dependencies array to be: [fetchData, login.loginUser]",{"range":"213","text":"214"},"Update the dependencies array to be: [boardId, fetchBoardByUrl]",{"range":"215","text":"216"},"Update the dependencies array to be: [fetchBoardByUrl, match.path]",{"range":"217","text":"218"},"Update the dependencies array to be: [fetchBoardByUrl]",{"range":"219","text":"220"},[1737,1752],"[login, login.isLogin]",[1429,1431],"[fetchData]",[1414,1416],"[fetchData, login.loginUser]",[1257,1266],"[boardId, fetchBoardByUrl]",[2936,2948],"[fetchBoardByUrl, match.path]",[2220,2222],"[fetchBoardByUrl]"]